{"version":3,"sources":["components/TimeClock/TimeClock.js","components/Bellman/Bellman.js","components/StaffTable/Employee/Employee.js","components/StaffTable/StaffTable.js","components/Fronts/AssignModal/AssignModal.js","components/Fronts/FrontModal/FrontModal.js","components/Fronts/Fronts.js","components/Fronts/Front/Front.js","App.js","serviceWorker.js","index.js"],"names":["timeClock","props","className","htmlFor","type","id","placeholder","onClick","click","Bellman","lastName","firstName","position","this","status","active","employee","staffTable","isDisabled","btnType","isHidden","bellmen","map","bellman","index","Employee","key","staffButtonClick","disabled","activeBellmanStatus","hidden","assignModal","noBellmen","availBellmen","i","length","data-dismiss","bellmanClick","assignBtn","data-toggle","data-target","confirmCancel","frontModal","ticketInput","frontInputs","onChange","e","frontInputsHandler","target","value","ticketError","name","typeSelect","typeError","room","roomError","nameError","rows","comment","defaultChecked","fronts","front","time","Math","floor","currentTime","getTime","frontClick","ticket","eliteStatus","FrontModal","AssignModal","Front","Date","App","state","activeIndex","activeStatus","activeFront","elite","clockInHandler","last","document","getElementById","first","classList","remove","add","push","setState","showStaffTable","showFrontsTable","employeeClickHandler","forEach","statusHandler","action","splice","field","inputState","validate","inputs","addFrontHandler","reset","typeSelectHandler","frontClickHandler","assignBtnHandler","indexOf","alert","confirmCancelHandler","console","log","setInterval","setCurrentTime","Fronts","TimeClock","StaffTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.558160a2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst timeClock = (props) => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"text-center my-3 display-3\">Staff</h1>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" />\r\n                            <label id=\"lastNameValidator\" htmlFor=\"lastName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"First Name\" />\r\n                            <label id=\"firstNameValidator\" htmlFor=\"firstName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"position\">Position:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"position\" placeholder=\"Position\" />\r\n                            <label id=\"positionValidator\" htmlFor=\"position\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={props.click}>Clock In</button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default timeClock;","class Bellman {\r\n    constructor(lastName, firstName, position) {\r\n        this.lastName = lastName;\r\n        this.firstName = firstName;\r\n        this.position = position;\r\n        this.status = \"Available\";\r\n        this.active = \"false\";\r\n    }\r\n}\r\n\r\nexport default Bellman;","import React from 'react';\r\n\r\nconst employee = (props) => {\r\n    return (\r\n        <tr className=\"text-capitalize\" onClick={props.click} active={props.active}>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.position}</td>\r\n            <td>{props.status}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default employee;","import React from 'react';\r\n\r\nimport Employee from './Employee/Employee';\r\n\r\nconst staffTable = (props) => {\r\n\r\n    const isDisabled = (btnType, status) => {\r\n        if (btnType === 'startBreak') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'endBreak') {\r\n            if (status === 'On Break') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'clockOut') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    const isHidden = (btnType, status) => {\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Away') return true;\r\n            else return false;\r\n        }\r\n        if (btnType === 'enterQueue') {\r\n            if (status === 'Away') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className={props.className}>\r\n            <div className=\"container\">\r\n                <table className=\"table\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Last Name</th>\r\n                            <th>First Name</th>\r\n                            <th>Position</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.bellmen.map((bellman, index) => {\r\n                            return (\r\n                                <Employee\r\n                                    lastName={bellman.lastName}\r\n                                    firstName={bellman.firstName}\r\n                                    position={bellman.position}\r\n                                    status={bellman.status}\r\n                                    key={index}\r\n                                    click={() => props.click(index)}\r\n                                    active={bellman.active}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"text-center\">\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('startBreak')}\r\n                        disabled={isDisabled('startBreak', props.activeBellmanStatus)}>Start Break\r\n                        </button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('endBreak')}\r\n                        disabled={isDisabled('endBreak', props.activeBellmanStatus)}>End Break</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('exitQueue')}\r\n                        disabled={isDisabled('exitQueue', props.activeBellmanStatus)}\r\n                        hidden={isHidden('exitQueue', props.activeBellmanStatus)}>Exit Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('enterQueue')}\r\n                        hidden={isHidden('enterQueue', props.activeBellmanStatus)}>Enter Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('clockOut')}\r\n                        disabled={isDisabled('clockOut', props.activeBellmanStatus)}>Clock Out</button>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default staffTable;","import React from 'react';\r\n\r\nconst assignModal = (props) => {\r\n    let noBellmen = null;\r\n    let availBellmen = false;\r\n    for (let i = 0; i < props.bellmen.length; i++) {\r\n        if (props.bellmen[i].status === \"Available\" || props.bellmen.status === \"busy\") {\r\n            availBellmen = true;\r\n        }\r\n    }\r\n    if (availBellmen === false) {\r\n        noBellmen =\r\n            <p className=\"text-center\">*No available bellmen</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"modal\" id=\"assignModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Assign Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table text-capitalize\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Last Name</th>\r\n                                        <th>First Name</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        props.bellmen.map((bellman, index) => {\r\n                                            if (bellman.status === \"Available\" || bellman.status === \"Busy\") {\r\n                                                return (\r\n                                                    <tr key={index} onClick={() => props.bellmanClick(index)} active={bellman.active}>\r\n                                                        <td>{bellman.lastName}</td>\r\n                                                        <td>{bellman.firstName}</td>\r\n                                                        <td>{bellman.status}</td>\r\n                                                    </tr>\r\n                                                )\r\n                                            }\r\n                                            else return null;\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            {noBellmen}\r\n                            <div className=\"text-center\">\r\n                                <button className=\"btn btn-success m-3\" onClick={props.assignBtn} data-dismiss=\"modal\">Assign</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\" data-toggle=\"modal\" data-target=\"#confirmCancelModal\">Cancel Front</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal\" id=\"confirmCancelModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body text-center\">\r\n                            <h1 className=\"m-5\">Are you sure you want to cancel this front?</h1>\r\n                            <button className=\"btn btn-lg btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                            <button className=\"btn btn-lg btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default assignModal;","import React from 'react';\r\n\r\nconst frontModal = (props) => {\r\n    let room = '';\r\n    let name = '';\r\n    let ticket = '';\r\n    let comment = '';\r\n    let elite = '';\r\n\r\n    let ticketInput = null;\r\n    if (props.frontInputs.type === 'Check In') {\r\n        ticketInput =\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"ticketNumber\"\r\n                        placeholder=\"Ticket #\"\r\n                        onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                    />\r\n                    <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    } else {\r\n        ticketInput = null;\r\n    }\r\n    \r\n\r\n    return (\r\n        <form id=\"frontForm\">\r\n            <div className=\"modal\" id=\"frontModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Add Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\" value=\"Check In\" onChange={() => props.typeSelect('Check In')} />Check In\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\" value=\"Check Out\" onChange={() => props.typeSelect('Check Out')} />Check Out\r\n                                </label>\r\n                            </div>\r\n                            <p className=\"text-danger\">{props.frontInputs.typeError}</p>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontRoom\">Room:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontRoom\"\r\n                                            placeholder=\"Room #\"\r\n                                            onChange={(e) => props.frontInputsHandler('room', e.target.value)}\r\n                                            value={props.frontInputs.room}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.roomError}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontName\">Last Name:</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontName\"\r\n                                            placeholder=\"Last Name\"\r\n                                            onChange={(e) => props.frontInputsHandler('name', e.target.value)}\r\n                                            value={props.frontInputs.name}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.nameError}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {ticketInput}\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontComment\">Comment:</label>\r\n                                        <textarea\r\n                                            className=\"form-control\"\r\n                                            id=\"frontComment\"\r\n                                            rows=\"2\"\r\n                                            placeholder=\"Comment...\"\r\n                                            onChange={(e) => props.frontInputsHandler('comment', e.target.value)}\r\n                                            value={props.frontInputs.comment}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\" value=\"Elite\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Elite\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\" value=\"Platinum\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Platinum\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\" value=\"Titanium\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Titanium\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"ambassadorRadio\" name=\"frontAmbassador\" value=\"Ambassador\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Ambassador\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} defaultChecked />None\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-success form-control\" onClick={() => props.click(room, name, ticket, comment, elite)} data-dismiss=\"modal\">Dispatch</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </form>\r\n        )\r\n}\r\n\r\nexport default frontModal;","import React from 'react';\r\n\r\nimport AssignModal from './AssignModal/AssignModal';\r\nimport FrontModal from './FrontModal/FrontModal';\r\n\r\nconst fronts = (props) => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Fronts</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" id=\"addFrontBtn\" data-toggle=\"modal\" data-target=\"#frontModal\">Add Front</button>\r\n                <section className={props.className}>\r\n                    <h1>Pending</h1>\r\n                    <table className=\"table table-hover text-capitalize\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Comment</th>\r\n                                <th>Elite</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {props.fronts.map((front, index) => {\r\n                                let time = Math.floor((props.currentTime.getTime() - front.time.getTime()) / 1000 / 60);\r\n                                if (time < 0) {\r\n                                    time = 0;\r\n                                }\r\n                                if (front.status === 'Pending') {\r\n                                    return (\r\n                                        <tr key={front.time} data-toggle=\"modal\" data-target=\"#assignModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={front.time}>{time}</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n\r\n                <section>\r\n                    <div className={props.className}>\r\n                        <h1>Assigned</h1>\r\n                        <table className=\"table table-hover text-capitalize\">\r\n                            <thead className=\"bg-light\">\r\n                                <tr>\r\n                                    <th>Time</th>\r\n                                    <th>Bellman</th>\r\n                                    <th>Room</th>\r\n                                    <th>Last Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Ticket</th>\r\n                                    <th>Comment</th>\r\n                                    <th>Elite</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.fronts.map((front, index) => {\r\n                                    if (front.status === 'Assigned') {\r\n                                        let time = Math.floor((props.currentTime.getTime() - front.time.getTime()) / 1000 / 60);\r\n                                        if (time < 0) {\r\n                                            time = 0;\r\n                                        }\r\n                                        let bellman = front.bellman.firstName + ' ' + front.bellman.lastName;\r\n                                        return (\r\n                                            <tr key={front.time} data-toggle=\"modal\" data-target=\"#completeModal\" onClick={() => props.frontClick(index)}>\r\n                                                <td id={front.time}>{time}</td>\r\n                                                <td>{bellman}</td>\r\n                                                <td>{front.room}</td>\r\n                                                <td>{front.name}</td>\r\n                                                <td>{front.type}</td>\r\n                                                <td>{front.ticket}</td>\r\n                                                <td>{front.comment}</td>\r\n                                                <td>{front.eliteStatus}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </section>\r\n\r\n                <div className=\"modal\" id=\"completeModal\">\r\n                    <div className=\"modal-dialog p-5\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-body text-center\">\r\n                                <h1>Complete?</h1>\r\n                                <button className=\"btn btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FrontModal\r\n                    click={props.click}\r\n                    typeSelect={props.typeSelect}\r\n                    frontInputs={props.frontInputs}\r\n                    frontInputsHandler={props.frontInputsHandler}\r\n                />\r\n                <AssignModal\r\n                    bellmen={props.bellmen}\r\n                    bellmanClick={props.bellmanClick}\r\n                    assignBtn={props.assignBtn}\r\n                    confirmCancel={props.confirmCancel}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default fronts;","class Front {\r\n    constructor(type, room, name, ticket, comment, eliteStatus) {\r\n        this.type = type;\r\n        this.room = room;\r\n        this.name = name;\r\n        this.ticket = ticket;\r\n        this.comment = comment;\r\n        this.eliteStatus = eliteStatus;\r\n        this.time = new Date();\r\n        this.bellman = null;\r\n        this.status = 'Pending';\r\n    }\r\n}\r\n\r\nexport default Front;","import React, { Component } from 'react';\nimport './App.css';\n\nimport TimeClock from './components/TimeClock/TimeClock';\nimport Bellman from './components/Bellman/Bellman';\nimport StaffTable from './components/StaffTable/StaffTable';\nimport Fronts from './components/Fronts/Fronts';\nimport Front from './components/Fronts/Front/Front';\n\nclass App extends Component {\n    state = {\n        bellmen: [],\r\n        activeIndex: '',\r\n        activeStatus: '',\r\n\r\n        fronts: [],\r\n        activeFront: null,\r\n        frontInputs: {\r\n            type: '',\r\n            room: '',\r\n            name: '',\r\n            ticket: '',\r\n            comment: '',\r\n            elite: '',\r\n            //Errors\r\n            typeError: '',\r\n            roomError: '',\r\n            nameError: '',\r\n            ticketError: ''\r\n        },\r\n\r\n        currentTime: new Date()\r\n    }\n\n    setCurrentTime() {\n        console.log('time');\r\n        this.setState({ currentTime: new Date() });\r\n    }\n\n    componentDidMount() {\n        setInterval(()=>this.setCurrentTime(), 3000);\r\n    }\n\n\n    clockInHandler = () => {\n        let last = document.getElementById('lastName').value;\n        let first = document.getElementById('firstName').value;\n        let position = document.getElementById('position').value;\n        if (last === \"\" || first === \"\" || position === \"\") {\n            if (last === \"\") {\n                document.getElementById('lastNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('lastNameValidator').classList.add('d-none');\n            if (first === \"\") {\n                document.getElementById('firstNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('firstNameValidator').classList.add('d-none');\n            if (position === \"\") {\n                document.getElementById('positionValidator').classList.remove('d-none');\r\n            } else document.getElementById('positionValidator').classList.add('d-none');\r\n        } else {\n            let bellmen = this.state.bellmen;\n            bellmen.push(new Bellman(last, first, position));\n            this.setState({ bellmen: bellmen });\n            document.getElementById('lastNameValidator').classList.add('d-none');\n            document.getElementById('firstNameValidator').classList.add('d-none');\n            document.getElementById('positionValidator').classList.add('d-none');\r\n            document.getElementById('lastName').value = \"\";\r\n            document.getElementById('firstName').value = \"\";\r\n            document.getElementById('position').value = \"\";\r\n            \r\n\r\n        }\r\n    }\n\n    showStaffTable = (bellmen) => {\n        if (bellmen.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n    showFrontsTable = (fronts) => {\n        if (fronts.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n    employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n\n    statusHandler = (action) => {\n        let status = this.state.activeStatus;\n        let index = this.state.activeIndex;\n\n        let bellmen = [...this.state.bellmen];\n\n        if (action === \"startBreak\") {\r\n            status = \"On Break\";\r\n        }\r\n        else if (action === \"endBreak\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"exitQueue\") {\r\n            status = \"Away\";\r\n        }\r\n        else if (action === \"enterQueue\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"clockOut\") {\r\n            bellmen.splice(index, 1);\r\n            index = \"\";\r\n            let activeStatus = \"\";\r\n            this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n            return;\r\n        }\r\n\r\n        bellmen[index].status = status;\r\n        let activeStatus = status;\r\n\r\n        this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n\r\n    }\n\n    frontInputsHandler = (field, value) => {\n        let inputState = this.state.frontInputs;\n        if (field === 'room') {\r\n            inputState.room = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'name') {\r\n            inputState.name = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'ticket') {\r\n            inputState.ticket = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'comment') {\r\n            inputState.comment = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'elite') {\r\n            inputState.elite = value;\r\n            this.setState({ frontInputs: inputState });\r\n        }\r\n    }\n\n    validate = (inputs) => {\n        if (inputs.type === '' || inputs.room === '' || inputs.name === '') {\r\n            return true;\r\n        }\r\n        if (inputs.type === 'Check In' && inputs.ticket === '') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\n\n    addFrontHandler = () => {\r\n        const inputs = this.state.frontInputs;\r\n        const missingItem = this.validate(inputs);\r\n        if (missingItem) {\r\n            if (inputs.type === '') inputs.typeError = '*Required';\r\n            if (inputs.room === '') inputs.roomError = '*Required';\r\n            if (inputs.name === '') inputs.nameError = '*Required';\r\n            if (inputs.type === 'Check In' && inputs.ticket === '') inputs.ticketError = '*Required';\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('addFrontBtn').click();\r\n        } else {\r\n            const front = new Front(inputs.type, inputs.room, inputs.name, inputs.ticket, inputs.comment, inputs.elite);\r\n            const fronts = [...this.state.fronts, front];\r\n            this.setState({ fronts: fronts });\r\n            inputs.room = '';\r\n            inputs.name = '';\r\n            inputs.ticket = '';\r\n            inputs.comment = '';\r\n            inputs.elite = '';\r\n            inputs.typeError = '';\r\n            inputs.roomError = '';\r\n            inputs.nameError = '';\r\n            inputs.ticketError = '';\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('frontForm').reset();\r\n        }\r\n    }\n\n    typeSelectHandler = (type) => {\r\n        let frontInputs = this.state.frontInputs;\r\n        frontInputs.type = type;\r\n        this.setState({ frontInputs: frontInputs });\r\n    }\n\n    frontClickHandler = (index) => {\n        let fronts = [...this.state.fronts];\r\n        let activeFront = fronts[index];\r\n\r\n        this.state.bellmen.forEach((bellman) => {\r\n            bellman.active = 'false';\r\n        })\r\n        let bellmen = [...this.state.bellmen];\r\n        this.setState({ bellmen: bellmen, activeFront: activeFront, activeIndex: '' });\r\n    }\n\n    assignBtnHandler = () => {\n        if (this.state.activeIndex !== '') {\n            let activeFront = this.state.activeFront;\r\n            let fronts = this.state.fronts;\r\n            let index = fronts.indexOf(activeFront);\r\n            fronts.splice(index, 1);\r\n            activeFront.status = 'Assigned';\r\n            activeFront.bellman = this.state.bellmen[this.state.activeIndex];\r\n            fronts.push(activeFront);\r\n            this.setState({ activeFront: activeFront, fronts: fronts });\r\n        } else {\r\n            alert(\"Select a bellman to assign\");\r\n        }\r\n\r\n    }\n\n    confirmCancelHandler = () => {\n        const activeFront = this.state.activeFront;\r\n        let fronts = this.state.fronts;\r\n        let index = fronts.indexOf(activeFront);\r\n        fronts.splice(index, 1);\r\n        this.setState({ fronts: fronts });\r\n    }\n\n\n\n\n    render() {\n\n\n\n\n        return (\n            <div className=\"App\">\n                <Fronts\n                    className={this.showFrontsTable(this.state.fronts)}\n                    fronts={this.state.fronts}\n                    click={this.addFrontHandler}\n                    frontClick={this.frontClickHandler}\n                    bellmen={this.state.bellmen}\n                    typeSelect={this.typeSelectHandler}\n                    frontInputs={this.state.frontInputs}\n                    frontInputsHandler={this.frontInputsHandler}\n                    bellmanClick={this.employeeClickHandler}\n                    assignBtn={this.assignBtnHandler}\n                    confirmCancel={this.confirmCancelHandler}\n                    currentTime={this.state.currentTime}\n                />\n                <TimeClock click={this.clockInHandler} />\n                <StaffTable\n                    className={this.showStaffTable(this.state.bellmen)}\n                    bellmen={this.state.bellmen}\n                    click={this.employeeClickHandler}\n                    status={this.state.activeStatus}\n                    activeBellmanStatus={this.state.activeStatus}\n                    staffButtonClick={this.statusHandler}\n                />\n            </div>\n        );\r\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}