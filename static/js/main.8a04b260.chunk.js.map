{"version":3,"sources":["components/TimeClock/TimeClock.js","components/Bellman/Bellman.js","components/StaffTable/Employee/Employee.js","components/StaffTable/StaffTable.js","components/Fronts/AssignModal/AssignModal.js","components/Fronts/FrontModal/FrontModal.js","components/Fronts/Fronts.js","components/Fronts/Front/Front.js","App.js","serviceWorker.js","index.js"],"names":["timeClock","props","className","htmlFor","type","id","placeholder","onClick","click","Bellman","lastName","firstName","position","this","status","active","employee","staffTable","bellmen","map","bellman","index","Employee","key","buttons","assignModal","noBellmen","availBellmen","i","length","data-dismiss","frontModal","room","name","ticket","comment","elite","setFrontInfo","field","value","console","log","ticketInput","frontType","onChange","e","target","typeSelect","rows","defaultChecked","fronts","frontIndex","data-toggle","data-target","front","frontClickHandler","time","currentTime","tte","dispatchTime","getTime","setInterval","Date","document","getElementById","innerHTML","Math","floor","eliteStatus","FrontModal","AssignModal","Front","App","state","activeIndex","activeStatus","frontInput","clockInHandler","last","first","classList","remove","add","push","setState","showStaffTable","employeeClickHandler","forEach","statusHandler","action","splice","addFrontHandler","typeSelectHandler","disabled","TimeClock","StaffTable","Fronts","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a04b260.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst timeClock = (props) => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"text-center my-3 display-3\">Staff</h1>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" />\r\n                            <label id=\"lastNameValidator\" htmlFor=\"lastName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"First Name\" />\r\n                            <label id=\"firstNameValidator\" htmlFor=\"firstName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"position\">Position:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"position\" placeholder=\"Position\" />\r\n                            <label id=\"positionValidator\" htmlFor=\"position\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={props.click}>Clock In</button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default timeClock;","class Bellman {\r\n    constructor(lastName, firstName, position) {\r\n        this.lastName = lastName;\r\n        this.firstName = firstName;\r\n        this.position = position;\r\n        this.status = \"Available\";\r\n        this.active = \"false\";\r\n    }\r\n}\r\n\r\nexport default Bellman;","import React from 'react';\r\n\r\nconst employee = (props) => {\r\n    return (\r\n        <tr className=\"text-capitalize\" onClick={props.click} active={props.active}>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.position}</td>\r\n            <td>{props.status}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default employee;","import React from 'react';\r\n\r\nimport Employee from './Employee/Employee';\r\n\r\nconst staffTable = (props) => {\r\n\r\n    return (\r\n        <section className={props.className}>\r\n            <div className=\"container\">\r\n                <table className=\"table\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Last Name</th>\r\n                            <th>First Name</th>\r\n                            <th>Position</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.bellmen.map((bellman, index) => {\r\n                            return (\r\n                                <Employee\r\n                                    lastName={bellman.lastName}\r\n                                    firstName={bellman.firstName}\r\n                                    position={bellman.position}\r\n                                    status={bellman.status}\r\n                                    key={index}\r\n                                    click={() => props.click(index)}\r\n                                    active={bellman.active}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                {props.buttons}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default staffTable;","import React from 'react';\r\n\r\nconst assignModal = (props) => {\r\n    let noBellmen = null;\r\n    let availBellmen = false;\r\n    for (let i = 0; i < props.bellmen.length; i++) {\r\n        if (props.bellmen[i].status === \"Available\" || props.bellmen.status === \"busy\") {\r\n            availBellmen = true;\r\n        }\r\n    }\r\n    if (availBellmen === false) {\r\n        noBellmen =\r\n            <p className=\"text-center\">*No available bellmen</p>\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\" id=\"assignModal\">\r\n            <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2 className=\"modal-title\">Assign Front</h2>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    </div>\r\n\r\n                    <div className=\"modal-body\">\r\n                        <table className=\"table text-capitalize\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Last Name</th>\r\n                                    <th>First Name</th>\r\n                                    <th>Status</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.bellmen.map((bellman, index) => {\r\n                                        if (bellman.status === \"Available\" || bellman.status === \"Busy\") {\r\n                                            return (\r\n                                                <tr key={index}>\r\n                                                    <td>{bellman.lastName}</td>\r\n                                                    <td>{bellman.firstName}</td>\r\n                                                    <td>{bellman.status}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }\r\n                                        else return null;\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                        {noBellmen}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default assignModal;","import React from 'react';\r\n\r\nconst frontModal = (props) => {\r\n\r\n    let room = '';\r\n    let name = '';\r\n    let ticket = '';\r\n    let comment = '';\r\n    let elite = '';\r\n\r\n    const setFrontInfo = (field, value) => {\r\n        if (field === 'room') {\r\n            room = value;\r\n        }\r\n        else if (field === \"name\") {\r\n            name = value;\r\n        }\r\n        else if (field === \"ticket\") {\r\n            ticket = value;\r\n        }\r\n        else if (field === \"comment\") {\r\n            comment = value;\r\n        }\r\n        else if (field === \"elite\") {\r\n            elite = value;\r\n        }\r\n        console.log(room, name, ticket, comment, elite);\r\n    }\r\n\r\n    console.log(room);\r\n\r\n    let ticketInput = null;\r\n    if (props.frontType === 'Check In') {\r\n        ticketInput =\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"ticketNumber\" placeholder=\"Ticket #\" onChange={(e) => setFrontInfo('ticket', e.target.value)} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    } else {\r\n        ticketInput = null;\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"modal\" id=\"frontModal\">\r\n            <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2 className=\"modal-title\">Add Front</h2>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    </div>\r\n\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\" value=\"Check In\" onChange={() => props.typeSelect('Check In')} />Check In\r\n                        </label>\r\n                        </div>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\" value=\"Check Out\" onChange={() => props.typeSelect('Check Out')} />Check Out\r\n                        </label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"frontRoom\">Room:</label>\r\n                                    <input type=\"number\" className=\"form-control\" id=\"frontRoom\" placeholder=\"Room #\" onChange={(e) => setFrontInfo('room', e.target.value)} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"frontName\">Last Name:</label>\r\n                                    <input type=\"text\" className=\"form-control\" id=\"frontName\" placeholder=\"Last Name\" onChange={(e) => setFrontInfo('name', e.target.value)} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {ticketInput}\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"frontComment\">Comment:</label>\r\n                                    <textarea className=\"form-control\" id=\"frontComment\" rows=\"2\" placeholder=\"Comment...\" onChange={(e) => setFrontInfo('comment', e.target.value)} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\" value=\"Elite\" onChange={(e) => setFrontInfo('elite', e.target.value)} />Elite\r\n                        </label>\r\n                        </div>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\" value=\"Platinum\" onChange={(e) => setFrontInfo('elite', e.target.value)} />Platinum\r\n                        </label>\r\n                        </div>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\" value=\"Titanium\" onChange={(e) => setFrontInfo('elite', e.target.value)} />Titanium\r\n                        </label>\r\n                        </div>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\" onChange={(e) => setFrontInfo('elite', e.target.value)} defaultChecked />None\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-success form-control\" onClick={() => props.click(room, name, ticket, comment, elite)} data-dismiss=\"modal\">Dispatch</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default frontModal;","import React from 'react';\r\n\r\nimport AssignModal from './AssignModal/AssignModal';\r\nimport FrontModal from './FrontModal/FrontModal';\r\n\r\nconst fronts = (props) => {\r\n\r\n    const getTime = (time, id) => {\r\n        let dispatchTime = time.getTime();\r\n        let currentTime;\r\n        let tte;\r\n        setInterval(function () {\r\n            currentTime = new Date().getTime();\r\n            tte = (currentTime - dispatchTime)/1000/60;\r\n            document.getElementById(id).innerHTML = Math.floor(tte);\r\n        }, 3000);\r\n    }\r\n\r\n    let frontIndex;\r\n    const frontClickHandler = (index) => {\r\n        frontIndex = index;\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Fronts</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#frontModal\">Add Front</button>\r\n                <h1>Pending</h1>\r\n                <table className=\"table table-hover text-capitalize\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Time</th>\r\n                            <th>Room</th>\r\n                            <th>Last Name</th>\r\n                            <th>Type</th>\r\n                            <th>Comment</th>\r\n                            <th>Elite</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {props.fronts.map((front, index) => {\r\n                        return (\r\n                            <tr key={index} data-toggle=\"modal\" data-target=\"#assignModal\" onClick={() => frontClickHandler(index)}>\r\n                                <td id={index}>{getTime(front.time, index)}0</td>\r\n                                <td>{front.room}</td>\r\n                                <td>{front.name}</td>\r\n                                <td>{front.type}</td>\r\n                                <td>{front.comment}</td>\r\n                                <td>{front.eliteStatus}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n                <FrontModal\r\n                    click={props.click}\r\n                    frontType={props.frontType}\r\n                    typeSelect={props.typeSelect}\r\n                />\r\n                <AssignModal\r\n                    front={frontIndex}\r\n                    bellmen={props.bellmen}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n//front.time.toLocaleString()\r\nexport default fronts;","class Front {\r\n    constructor(type, room, name, ticket, comment, eliteStatus, time) {\r\n        this.type = type;\r\n        this.room = room;\r\n        this.name = name;\r\n        this.ticket = ticket;\r\n        this.comment = comment;\r\n        this.eliteStatus = eliteStatus;\r\n        this.time = new Date();\r\n    }\r\n}\r\n\r\nexport default Front;","import React, { Component } from 'react';\nimport './App.css';\n\nimport TimeClock from './components/TimeClock/TimeClock';\nimport Bellman from './components/Bellman/Bellman';\nimport StaffTable from './components/StaffTable/StaffTable';\nimport Fronts from './components/Fronts/Fronts';\nimport Front from './components/Fronts/Front/Front';\n\nclass App extends Component {\n    state = {\n        bellmen: [],\r\n        activeIndex: \"\",\r\n        activeStatus: \"\",\r\n        fronts: [],\r\n        frontType: \"\",\r\n        frontInput: {\r\n            room: \"\",\r\n            name: \"\",\r\n            ticket: \"\",\r\n            comment: \"\",\r\n            elite: \"\"\r\n        }\r\n    }\n\n    clockInHandler = () => {\n        console.log(this.state);\n        let last = document.getElementById('lastName').value;\n        let first = document.getElementById('firstName').value;\n        let position = document.getElementById('position').value;\n        if (last === \"\" || first === \"\" || position === \"\") {\n            if (last === \"\") {\n                document.getElementById('lastNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('lastNameValidator').classList.add('d-none');\n            if (first === \"\") {\n                document.getElementById('firstNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('firstNameValidator').classList.add('d-none');\n            if (position === \"\") {\n                document.getElementById('positionValidator').classList.remove('d-none');\r\n            } else document.getElementById('positionValidator').classList.add('d-none');\r\n        } else {\n            let bellmen = this.state.bellmen;\n            bellmen.push(new Bellman(last, first, position));\n            this.setState({ bellmen: bellmen });\n            document.getElementById('lastNameValidator').classList.add('d-none');\n            document.getElementById('firstNameValidator').classList.add('d-none');\n            document.getElementById('positionValidator').classList.add('d-none');\r\n            document.getElementById('lastName').value = \"\";\r\n            document.getElementById('firstName').value = \"\";\r\n            document.getElementById('position').value = \"\";\r\n            \r\n\r\n        }\r\n    }\n\n    showStaffTable = (bellmen) => {\n        if (bellmen.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n    employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n\n    statusHandler = (action) => {\n        let status = this.state.activeStatus;\n        let index = this.state.activeIndex;\n\n        let bellmen = [...this.state.bellmen];\n\n        if (action === \"startBreak\") {\r\n            status = \"On Break\";\r\n        }\r\n        else if (action === \"endBreak\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"exitQueue\") {\r\n            status = \"Away\";\r\n        }\r\n        else if (action === \"enterQueue\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"clockOut\") {\r\n            bellmen.splice(index, 1);\r\n            index = \"\";\r\n            let activeStatus = \"\";\r\n            this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n            return;\r\n        }\r\n\r\n        bellmen[index].status = status;\r\n        let activeStatus = status;\r\n\r\n        this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n\r\n    }\n\n    addFrontHandler = (room, name, ticket, comment, elite) => {\n        let type = this.state.frontType;\n        /*\n        let room = document.getElementById('frontRoom').value;\r\n        let name = document.getElementById('frontName').value;\r\n        let comment = document.getElementById('frontComment').value;\r\n        let eliteStatus = document.getElementsByName('frontElite').value;\n        if (document.getElementById('eliteRadio').checked) {\n            eliteStatus = 'Elite';\r\n        }\n        else if (document.getElementById('platinumRadio').checked) {\n            eliteStatus = 'Platinum';\r\n        }\r\n        else if (document.getElementById('titaniumRadio').checked) {\r\n            eliteStatus = 'Titanium';\r\n        }\r\n        */\r\n\r\n        let front = new Front(type, room, name, ticket, comment, elite);\r\n\r\n        const fronts = [...this.state.fronts, front];\r\n\r\n        this.setState({ fronts: fronts });\r\n\r\n    }\n\n    typeSelectHandler = (type) => {\r\n        console.log(type);\r\n        this.setState({ frontType: type });\r\n    }\n\n\n\n\n    render() {\n        let buttons = null;\n        let status = this.state.activeStatus;\n        if (status === \"\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"Available\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary mx-3\" onClick={() => this.statusHandler(\"startBreak\")}>Start Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" onClick={() => this.statusHandler(\"exitQueue\")}>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary mx-3\" onClick={() => this.statusHandler(\"clockOut\")}>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"On Break\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" onClick={() => this.statusHandler(\"endBreak\")}>End Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"Away\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary mx-3\" onClick={() => this.statusHandler(\"enterQueue\")}>Enter Queue</button>\r\n                    <button className=\"btn btn-secondary mx-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n\n\n\n\n        return (\n            <div className=\"App\">\n                <TimeClock click={this.clockInHandler} />\n                <StaffTable\n                    className={this.showStaffTable(this.state.bellmen)}\n                    bellmen={this.state.bellmen}\n                    click={this.employeeClickHandler}\n                    status={this.state.activeStatus}\n                    buttons={buttons}\n                />\n                <Fronts\n                    fronts={this.state.fronts}\n                    frontType={this.state.frontType}\n                    click={this.addFrontHandler}\n                    bellmen={this.state.bellmen}\n                    typeSelect={this.typeSelectHandler}\n                />\n            </div>\n        );\r\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}