{"version":3,"sources":["components/TimeClock/TimeClock.js","components/Bellman/Bellman.js","components/StaffTable/Employee/Employee.js","components/StaffTable/StaffTable.js","components/Fronts/AssignModal/AssignModal.js","components/Fronts/FrontModal/FrontModal.js","components/Fronts/Fronts.js","components/Fronts/Front/Front.js","App.js","serviceWorker.js","index.js"],"names":["timeClock","props","className","htmlFor","type","id","placeholder","onClick","click","Bellman","lastName","firstName","position","this","status","active","employee","staffTable","bellmen","map","bellman","index","Employee","key","buttons","assignModal","noBellmen","availBellmen","i","length","data-dismiss","bellmanClick","assignBtn","data-toggle","data-target","confirmCancel","frontModal","ticketInput","frontInputs","onChange","e","frontInputsHandler","target","value","ticketError","name","typeSelect","typeError","room","roomError","nameError","rows","comment","defaultChecked","fronts","getTime","time","currentTime","tte","dispatchTime","setInterval","Date","document","getElementById","innerHTML","Math","floor","front","frontClick","ticket","eliteStatus","FrontModal","AssignModal","Front","App","state","activeIndex","activeStatus","activeFront","elite","clockInHandler","last","first","classList","remove","add","push","setState","showStaffTable","showFrontsTable","employeeClickHandler","forEach","statusHandler","action","splice","field","inputState","validate","inputs","addFrontHandler","reset","typeSelectHandler","frontClickHandler","assignBtnHandler","indexOf","alert","confirmCancelHandler","disabled","Fronts","TimeClock","StaffTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.536c7995.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst timeClock = (props) => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"text-center my-3 display-3\">Staff</h1>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" />\r\n                            <label id=\"lastNameValidator\" htmlFor=\"lastName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"First Name\" />\r\n                            <label id=\"firstNameValidator\" htmlFor=\"firstName\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"position\">Position:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"position\" placeholder=\"Position\" />\r\n                            <label id=\"positionValidator\" htmlFor=\"position\" className=\"text-danger d-none\">*Required</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={props.click}>Clock In</button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default timeClock;","class Bellman {\r\n    constructor(lastName, firstName, position) {\r\n        this.lastName = lastName;\r\n        this.firstName = firstName;\r\n        this.position = position;\r\n        this.status = \"Available\";\r\n        this.active = \"false\";\r\n    }\r\n}\r\n\r\nexport default Bellman;","import React from 'react';\r\n\r\nconst employee = (props) => {\r\n    return (\r\n        <tr className=\"text-capitalize\" onClick={props.click} active={props.active}>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.position}</td>\r\n            <td>{props.status}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default employee;","import React from 'react';\r\n\r\nimport Employee from './Employee/Employee';\r\n\r\nconst staffTable = (props) => {\r\n\r\n    return (\r\n        <section className={props.className}>\r\n            <div className=\"container\">\r\n                <table className=\"table\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Last Name</th>\r\n                            <th>First Name</th>\r\n                            <th>Position</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.bellmen.map((bellman, index) => {\r\n                            return (\r\n                                <Employee\r\n                                    lastName={bellman.lastName}\r\n                                    firstName={bellman.firstName}\r\n                                    position={bellman.position}\r\n                                    status={bellman.status}\r\n                                    key={index}\r\n                                    click={() => props.click(index)}\r\n                                    active={bellman.active}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                {props.buttons}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default staffTable;","import React from 'react';\r\n\r\nconst assignModal = (props) => {\r\n    let noBellmen = null;\r\n    let availBellmen = false;\r\n    for (let i = 0; i < props.bellmen.length; i++) {\r\n        if (props.bellmen[i].status === \"Available\" || props.bellmen.status === \"busy\") {\r\n            availBellmen = true;\r\n        }\r\n    }\r\n    if (availBellmen === false) {\r\n        noBellmen =\r\n            <p className=\"text-center\">*No available bellmen</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"modal\" id=\"assignModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Assign Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table text-capitalize\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Last Name</th>\r\n                                        <th>First Name</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        props.bellmen.map((bellman, index) => {\r\n                                            if (bellman.status === \"Available\" || bellman.status === \"Busy\") {\r\n                                                return (\r\n                                                    <tr key={index} onClick={() => props.bellmanClick(index)} active={bellman.active}>\r\n                                                        <td>{bellman.lastName}</td>\r\n                                                        <td>{bellman.firstName}</td>\r\n                                                        <td>{bellman.status}</td>\r\n                                                    </tr>\r\n                                                )\r\n                                            }\r\n                                            else return null;\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            {noBellmen}\r\n                            <div className=\"text-center\">\r\n                                <button className=\"btn btn-success m-3\" onClick={props.assignBtn} data-dismiss=\"modal\">Assign</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\" data-toggle=\"modal\" data-target=\"#confirmCancelModal\">Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal\" id=\"confirmCancelModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body text-center\">\r\n                            <h1 className=\"m-5\">Are you sure you want to cancel this front?</h1>\r\n                            <button className=\"btn btn-lg btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                            <button className=\"btn btn-lg btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default assignModal;","import React from 'react';\r\n\r\nconst frontModal = (props) => {\r\n    let room = '';\r\n    let name = '';\r\n    let ticket = '';\r\n    let comment = '';\r\n    let elite = '';\r\n\r\n    let ticketInput = null;\r\n    if (props.frontInputs.type === 'Check In') {\r\n        ticketInput =\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"ticketNumber\"\r\n                        placeholder=\"Ticket #\"\r\n                        onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                    />\r\n                    <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    } else {\r\n        ticketInput = null;\r\n    }\r\n    \r\n\r\n    return (\r\n        <form id=\"frontForm\">\r\n            <div className=\"modal\" id=\"frontModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Add Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\" value=\"Check In\" onChange={() => props.typeSelect('Check In')} />Check In\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\" value=\"Check Out\" onChange={() => props.typeSelect('Check Out')} />Check Out\r\n                                </label>\r\n                            </div>\r\n                            <p className=\"text-danger\">{props.frontInputs.typeError}</p>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontRoom\">Room:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontRoom\"\r\n                                            placeholder=\"Room #\"\r\n                                            onChange={(e) => props.frontInputsHandler('room', e.target.value)}\r\n                                            value={props.frontInputs.room}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.roomError}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontName\">Last Name:</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontName\"\r\n                                            placeholder=\"Last Name\"\r\n                                            onChange={(e) => props.frontInputsHandler('name', e.target.value)}\r\n                                            value={props.frontInputs.name}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.nameError}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {ticketInput}\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontComment\">Comment:</label>\r\n                                        <textarea\r\n                                            className=\"form-control\"\r\n                                            id=\"frontComment\"\r\n                                            rows=\"2\"\r\n                                            placeholder=\"Comment...\"\r\n                                            onChange={(e) => props.frontInputsHandler('comment', e.target.value)}\r\n                                            value={props.frontInputs.comment}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\" value=\"Elite\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Elite\r\n                            </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\" value=\"Platinum\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Platinum\r\n                            </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\" value=\"Titanium\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Titanium\r\n                            </label>\r\n                            </div>\r\n                            <div className=\"form-check-inline\">\r\n                                <label className=\"form-check-label\">\r\n                                    <input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} defaultChecked />None\r\n                            </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-success form-control\" onClick={() => props.click(room, name, ticket, comment, elite)} data-dismiss=\"modal\">Dispatch</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </form>\r\n        )\r\n}\r\n\r\nexport default frontModal;","import React from 'react';\r\n\r\nimport AssignModal from './AssignModal/AssignModal';\r\nimport FrontModal from './FrontModal/FrontModal';\r\n\r\nconst fronts = (props) => {\r\n    const getTime = (time, id) => {\r\n        let dispatchTime = time.getTime();\r\n        let currentTime;\r\n        let tte;\r\n        setInterval(function () {\r\n            currentTime = new Date().getTime();\r\n            tte = (currentTime - dispatchTime) / 1000 / 60;\r\n            if (document.getElementById(id) != null) {\r\n                document.getElementById(id).innerHTML = Math.floor(tte);\r\n            }\r\n        }, 3000);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Fronts</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" id=\"addFrontBtn\" data-toggle=\"modal\" data-target=\"#frontModal\">Add Front</button>\r\n                <section className={props.className}>\r\n                    <h1>Pending</h1>\r\n                    <table className=\"table table-hover text-capitalize\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Comment</th>\r\n                                <th>Elite</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {props.fronts.map((front, index) => {\r\n                                if (front.status === 'Pending') {\r\n                                    return (\r\n                                        <tr key={index} data-toggle=\"modal\" data-target=\"#assignModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={index}>{getTime(front.time, index)}0</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n\r\n                <section>\r\n                    <div className={props.className}>\r\n                        <h1>Assigned</h1>\r\n                        <table className=\"table table-hover text-capitalize\">\r\n                            <thead className=\"bg-light\">\r\n                                <tr>\r\n                                    <th>Time</th>\r\n                                    <th>Bellman</th>\r\n                                    <th>Room</th>\r\n                                    <th>Last Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Ticket</th>\r\n                                    <th>Comment</th>\r\n                                    <th>Elite</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.fronts.map((front, index) => {\r\n                                    if (front.status === 'Assigned') {\r\n                                        let bellman = front.bellman.firstName + ' ' + front.bellman.lastName;\r\n                                        return (\r\n                                            <tr key={index} data-toggle=\"modal\" data-target=\"#completeModal\" onClick={() => props.frontClick(index)}>\r\n                                                <td id={index}>{getTime(front.time, index)}0</td>\r\n                                                <td>{bellman}</td>\r\n                                                <td>{front.room}</td>\r\n                                                <td>{front.name}</td>\r\n                                                <td>{front.type}</td>\r\n                                                <td>{front.ticket}</td>\r\n                                                <td>{front.comment}</td>\r\n                                                <td>{front.eliteStatus}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </section>\r\n\r\n                <div className=\"modal\" id=\"completeModal\">\r\n                    <div className=\"modal-dialog p-5\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-body text-center\">\r\n                                <h1>Complete?</h1>\r\n                                <button className=\"btn btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FrontModal\r\n                    click={props.click}\r\n                    typeSelect={props.typeSelect}\r\n                    frontInputs={props.frontInputs}\r\n                    frontInputsHandler={props.frontInputsHandler}\r\n                />\r\n                <AssignModal\r\n                    bellmen={props.bellmen}\r\n                    bellmanClick={props.bellmanClick}\r\n                    assignBtn={props.assignBtn}\r\n                    confirmCancel={props.confirmCancel}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n//front.time.toLocaleString()\r\nexport default fronts;","class Front {\r\n    constructor(type, room, name, ticket, comment, eliteStatus, time) {\r\n        this.type = type;\r\n        this.room = room;\r\n        this.name = name;\r\n        this.ticket = ticket;\r\n        this.comment = comment;\r\n        this.eliteStatus = eliteStatus;\r\n        this.time = new Date();\r\n        this.bellman = null;\r\n        this.status = 'Pending';\r\n    }\r\n}\r\n\r\nexport default Front;","import React, { Component } from 'react';\nimport './App.css';\n\nimport TimeClock from './components/TimeClock/TimeClock';\nimport Bellman from './components/Bellman/Bellman';\nimport StaffTable from './components/StaffTable/StaffTable';\nimport Fronts from './components/Fronts/Fronts';\nimport Front from './components/Fronts/Front/Front';\n\nclass App extends Component {\n    state = {\n        bellmen: [],\r\n        activeIndex: '',\r\n        activeStatus: '',\r\n\r\n        fronts: [],\r\n        activeFront: null,\r\n        frontInputs: {\r\n            type: '',\r\n            room: '',\r\n            name: '',\r\n            ticket: '',\r\n            comment: '',\r\n            elite: '',\r\n            //Errors\r\n            typeError: '',\r\n            roomError: '',\r\n            nameError: '',\r\n            ticketError: ''\r\n        }\r\n    }\n\n    clockInHandler = () => {\n        let last = document.getElementById('lastName').value;\n        let first = document.getElementById('firstName').value;\n        let position = document.getElementById('position').value;\n        if (last === \"\" || first === \"\" || position === \"\") {\n            if (last === \"\") {\n                document.getElementById('lastNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('lastNameValidator').classList.add('d-none');\n            if (first === \"\") {\n                document.getElementById('firstNameValidator').classList.remove('d-none');\r\n            } else document.getElementById('firstNameValidator').classList.add('d-none');\n            if (position === \"\") {\n                document.getElementById('positionValidator').classList.remove('d-none');\r\n            } else document.getElementById('positionValidator').classList.add('d-none');\r\n        } else {\n            let bellmen = this.state.bellmen;\n            bellmen.push(new Bellman(last, first, position));\n            this.setState({ bellmen: bellmen });\n            document.getElementById('lastNameValidator').classList.add('d-none');\n            document.getElementById('firstNameValidator').classList.add('d-none');\n            document.getElementById('positionValidator').classList.add('d-none');\r\n            document.getElementById('lastName').value = \"\";\r\n            document.getElementById('firstName').value = \"\";\r\n            document.getElementById('position').value = \"\";\r\n            \r\n\r\n        }\r\n    }\n\n    showStaffTable = (bellmen) => {\n        if (bellmen.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n    showFrontsTable = (fronts) => {\n        if (fronts.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n    employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n\n    statusHandler = (action) => {\n        let status = this.state.activeStatus;\n        let index = this.state.activeIndex;\n\n        let bellmen = [...this.state.bellmen];\n\n        if (action === \"startBreak\") {\r\n            status = \"On Break\";\r\n        }\r\n        else if (action === \"endBreak\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"exitQueue\") {\r\n            status = \"Away\";\r\n        }\r\n        else if (action === \"enterQueue\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"clockOut\") {\r\n            bellmen.splice(index, 1);\r\n            index = \"\";\r\n            let activeStatus = \"\";\r\n            this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n            return;\r\n        }\r\n\r\n        bellmen[index].status = status;\r\n        let activeStatus = status;\r\n\r\n        this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n\r\n    }\n\n    frontInputsHandler = (field, value) => {\n        let inputState = this.state.frontInputs;\n        if (field === 'room') {\r\n            inputState.room = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'name') {\r\n            inputState.name = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'ticket') {\r\n            inputState.ticket = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'comment') {\r\n            inputState.comment = value;\r\n            this.setState({ frontInputs: inputState });\r\n        } else if (field === 'elite') {\r\n            inputState.elite = value;\r\n            this.setState({ frontInputs: inputState });\r\n        }\r\n    }\n\n    validate = (inputs) => {\n        if (inputs.type === '' || inputs.room === '' || inputs.name === '') {\r\n            return true;\r\n        }\r\n        if (inputs.type === 'Check In' && inputs.ticket === '') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\n\n    addFrontHandler = () => {\r\n        const inputs = this.state.frontInputs;\r\n        const missingItem = this.validate(inputs);\r\n        if (missingItem) {\r\n            if (inputs.type === '') inputs.typeError = '*Required';\r\n            if (inputs.room === '') inputs.roomError = '*Required';\r\n            if (inputs.name === '') inputs.nameError = '*Required';\r\n            if (inputs.type === 'Check In' && inputs.ticket === '') inputs.ticketError = '*Required';\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('addFrontBtn').click();\r\n        } else {\r\n            const front = new Front(inputs.type, inputs.room, inputs.name, inputs.ticket, inputs.comment, inputs.elite);\r\n            const fronts = [...this.state.fronts, front];\r\n            this.setState({ fronts: fronts });\r\n            inputs.room = '';\r\n            inputs.name = '';\r\n            inputs.ticket = '';\r\n            inputs.comment = '';\r\n            inputs.elite = '';\r\n            inputs.typeError = '';\r\n            inputs.roomError = '';\r\n            inputs.nameError = '';\r\n            inputs.ticketError = '';\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('frontForm').reset();\r\n        }\r\n    }\n\n    typeSelectHandler = (type) => {\r\n        let frontInputs = this.state.frontInputs;\r\n        frontInputs.type = type;\r\n        this.setState({ frontInputs: frontInputs });\r\n    }\n\n    frontClickHandler = (index) => {\n        let fronts = [...this.state.fronts];\r\n        let activeFront = fronts[index];\r\n\r\n        this.state.bellmen.forEach((bellman) => {\r\n            bellman.active = 'false';\r\n        })\r\n        let bellmen = [...this.state.bellmen];\r\n        this.setState({ bellmen: bellmen, activeFront: activeFront, activeIndex: '' });\r\n    }\n\n    /*\n     * employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n    */\n\n    assignBtnHandler = () => {\n        if (this.state.activeIndex !== '') {\n            let activeFront = this.state.activeFront;\r\n            let fronts = this.state.fronts;\r\n            let index = fronts.indexOf(activeFront);\r\n            fronts.splice(index, 1);\r\n            activeFront.status = 'Assigned';\r\n            activeFront.bellman = this.state.bellmen[this.state.activeIndex];\r\n            fronts.push(activeFront);\r\n            this.setState({ activeFront: activeFront, fronts: fronts });\r\n        } else {\r\n            alert(\"Select a bellman to assign\");\r\n        }\r\n\r\n    }\n\n    confirmCancelHandler = () => {\n        const activeFront = this.state.activeFront;\r\n        let fronts = this.state.fronts;\r\n        let index = fronts.indexOf(activeFront);\r\n        fronts.splice(index, 1);\r\n        this.setState({ fronts: fronts });\r\n    }\n\n\n\n\n    render() {\n        let buttons = null;\n        let status = this.state.activeStatus;\n        if (status === \"\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"Available\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary m-3\" onClick={() => this.statusHandler(\"startBreak\")}>Start Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" onClick={() => this.statusHandler(\"exitQueue\")}>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary m-3\" onClick={() => this.statusHandler(\"clockOut\")}>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"On Break\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" onClick={() => this.statusHandler(\"endBreak\")}>End Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Exit Queue</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n        else if (status === \"Away\") {\n            buttons =\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Start Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>End Break</button>\r\n                    <button className=\"btn btn-secondary m-3\" onClick={() => this.statusHandler(\"enterQueue\")}>Enter Queue</button>\r\n                    <button className=\"btn btn-secondary m-3\" disabled>Clock Out</button>\r\n                </div>\r\n        }\n\n\n\n\n        return (\n            <div className=\"App\">\n                <Fronts\n                    className={this.showFrontsTable(this.state.fronts)}\n                    fronts={this.state.fronts}\n                    click={this.addFrontHandler}\n                    frontClick={this.frontClickHandler}\n                    bellmen={this.state.bellmen}\n                    typeSelect={this.typeSelectHandler}\n                    frontInputs={this.state.frontInputs}\n                    frontInputsHandler={this.frontInputsHandler}\n                    bellmanClick={this.employeeClickHandler}\n                    assignBtn={this.assignBtnHandler}\n                    confirmCancel={this.confirmCancelHandler}\n                />\n                <TimeClock click={this.clockInHandler} />\n                <StaffTable\n                    className={this.showStaffTable(this.state.bellmen)}\n                    bellmen={this.state.bellmen}\n                    click={this.employeeClickHandler}\n                    status={this.state.activeStatus}\n                    buttons={buttons}\n                />\n            </div>\n        );\r\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}