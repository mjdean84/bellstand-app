{"version":3,"sources":["components/TimeClock/StaffTable/Employee/Employee.js","components/TimeClock/StaffTable/StaffTable.js","components/TimeClock/TimeClock.js","components/Bellman/Bellman.js","components/Fronts/AssignModal/AssignModal.js","components/Fronts/FrontModal/FrontModal.js","components/Fronts/EditModal/EditModal.js","components/Fronts/Fronts.js","components/Fronts/Front/Front.js","components/CompletedFronts/CompletedFronts.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["employee","props","className","onClick","click","active","lastName","firstName","position","timeIn","statusUpdated","status","staffTable","isDisabled","btnType","isHidden","bellmen","map","bellman","index","Employee","key","staffButtonClick","disabled","hidden","timeClock","class","StaffTable","employeeClick","htmlFor","type","id","placeholder","value","bellmanInputs","onChange","e","bellmanInputsHandler","target","lastNameError","firstNameError","positionError","Bellman","this","fullName","fronts","Date","toLocaleString","assignModal","noBellmen","availBellmen","i","length","data-dismiss","bellmanClick","assignBtn","data-toggle","data-target","confirmCancel","frontModal","name","typeSelect","frontInputs","typeError","frontInputsHandler","room","roomError","nameError","ticketError","min","bagsError","rows","comment","defaultChecked","editModal","isValid","roomValidator","front","nameValidator","ticketValidator","ticket","bagsValidator","bags","ticketInput","editInputs","checked","editType","eliteStatus","pendingClass","assignedClass","pendingFronts","forEach","assignedFronts","time","Math","floor","currentTime","getTime","frontClick","assignFront","FrontModal","AssignModal","EditModal","activeFront","editClick","Front","timeCompleted","timeElapsed","completedFronts","sort","nav","frontsClass","App","state","timeClockClass","completedClass","activeIndex","activeStatus","prevFrontState","elite","completedSort","showTable","arr","navClickHandler","el","val","toggle","setState","arg","argInput","argValue","input","inputs","clockInHandler","employeeClickHandler","statusHandler","action","splice","field","inputState","editTypeHandler","newType","editInputsHandler","validate","addFrontHandler","document","getElementById","reset","typeSelectHandler","frontClickHandler","assignHandler","frontIndex","indexOf","bellmanIndex","push","alert","completeFrontHandler","sortBy","property","order","a","b","sortCompletedHandler","setInterval","setCurrentTime","Nav","Fronts","tableClass","validators","TimeClock","CompletedFronts","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aefb502a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst employee = (props) => {\r\n    return (\r\n        <tr className=\"text-capitalize\" onClick={props.click} active={props.active}>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.position}</td>\r\n            <td>{props.timeIn}</td>\r\n            <td>{props.statusUpdated}</td>\r\n            <td>{props.status}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default employee;","import React from 'react';\r\n\r\nimport Employee from './Employee/Employee';\r\n\r\nconst staffTable = (props) => {\r\n\r\n    const isDisabled = (btnType, status) => {\r\n        if (btnType === 'startBreak') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'endBreak') {\r\n            if (status === 'On Break') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'clockOut') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    const isHidden = (btnType, status) => {\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Away') return true;\r\n            else return false;\r\n        }\r\n        if (btnType === 'enterQueue') {\r\n            if (status === 'Away') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className=\"container\">\r\n                <table className=\"table\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Last Name</th>\r\n                            <th>First Name</th>\r\n                            <th>Position</th>\r\n                            <th>Time In</th>\r\n                            <th>Status Updated</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white hover\">\r\n                        {props.bellmen.map((bellman, index) => {\r\n                            return (\r\n                                <Employee\r\n                                    key={index}\r\n                                    click={() => props.click(index)}\r\n                                    active={bellman.active}\r\n                                    lastName={bellman.lastName}\r\n                                    firstName={bellman.firstName}\r\n                                    position={bellman.position}\r\n                                    timeIn={bellman.timeIn}\r\n                                    statusUpdated={bellman.statusUpdated}\r\n                                    status={bellman.status}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"text-center\">\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('startBreak')}\r\n                        disabled={isDisabled('startBreak', props.status)}>Start Break\r\n                        </button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('endBreak')}\r\n                        disabled={isDisabled('endBreak', props.status)}>End Break</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('exitQueue')}\r\n                        disabled={isDisabled('exitQueue', props.status)}\r\n                        hidden={isHidden('exitQueue', props.status)}>Exit Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('enterQueue')}\r\n                        hidden={isHidden('enterQueue', props.status)}>Enter Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('clockOut')}\r\n                        disabled={isDisabled('clockOut', props.status)}>Clock Out</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default staffTable;","import React from 'react';\r\n\r\nimport StaffTable from './StaffTable/StaffTable'\r\n\r\nconst timeClock = (props) => {\r\n    return (\r\n        <section className={props.class}>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Staff</h1>\r\n                <hr />\r\n                <StaffTable\r\n                    className={props.className}\r\n                    bellmen={props.bellmen}\r\n                    click={props.employeeClick}\r\n                    status={props.status}\r\n                    staffButtonClick={props.staffButtonClick}\r\n                />\r\n                <h1>Add Employee</h1>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\"\r\n                                value={props.bellmanInputs.lastName}\r\n                                onChange={(e) => props.bellmanInputsHandler('lastName', e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\" className=\"text-danger\">{props.bellmanInputs.lastNameError}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"First Name\"\r\n                                value={props.bellmanInputs.firstName}\r\n                                onChange={(e) => props.bellmanInputsHandler('firstName', e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"firstName\" className=\"text-danger\">{props.bellmanInputs.firstNameError}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"position\">Position:</label>\r\n                            <select className=\"form-control\" id=\"position\" value={props.bellmanInputs.position}\r\n                                onChange={(e) => props.bellmanInputsHandler('position', e.target.value)}>\r\n                                <option value=\"\" hidden>Select Position</option>\r\n                                <option value=\"Bellman\">Bellman</option>\r\n                                <option value=\"Bell Captain\">Bell Captain</option>\r\n                                <option value=\"Manager\">Manager</option>\r\n                                <option value=\"Other\">Other</option>\r\n                            </select>\r\n                            <label htmlFor=\"position\" className=\"text-danger\">{props.bellmanInputs.positionError}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={props.click}>Clock In</button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default timeClock;","class Bellman {\r\n    constructor(lastName, firstName, position) {\r\n        this.lastName = lastName;\r\n        this.firstName = firstName;\r\n        this.fullName = firstName + ' ' + lastName;\r\n        this.position = position;\r\n        this.status = \"Available\";\r\n        this.active = \"false\";\r\n        this.fronts = 0;\r\n        this.timeIn = new Date().toLocaleString();\r\n        this.statusUpdated = new Date().toLocaleString();\r\n    }\r\n}\r\n\r\nexport default Bellman;","import React from 'react';\r\n\r\nconst assignModal = (props) => {\r\n    let noBellmen = null;\r\n    let availBellmen = false;\r\n    for (let i = 0; i < props.bellmen.length; i++) {\r\n        if (props.bellmen[i].status === \"Available\" || props.bellmen[i].status === \"Busy\") {\r\n            availBellmen = true;\r\n        }\r\n    }\r\n    if (availBellmen === false) {\r\n        noBellmen =\r\n            <p className=\"text-center\">*No available bellmen</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"modal\" id=\"assignModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Assign Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table text-capitalize\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Last Name</th>\r\n                                        <th>First Name</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody className=\"hover\">\r\n                                    {\r\n                                        props.bellmen.map((bellman, index) => {\r\n                                            if (bellman.status === \"Available\" || bellman.status === \"Busy\") {\r\n                                                return (\r\n                                                    <tr key={index} onClick={() => props.bellmanClick(index)} active={bellman.active}>\r\n                                                        <td>{bellman.lastName}</td>\r\n                                                        <td>{bellman.firstName}</td>\r\n                                                        <td>{bellman.status}</td>\r\n                                                    </tr>\r\n                                                )\r\n                                            }\r\n                                            else return null;\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            {noBellmen}\r\n                            <div className=\"text-center\">\r\n                                <button className=\"btn btn-success m-3\" onClick={() => props.assignBtn('assign')}\r\n                                    data-dismiss=\"modal\">Assign</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\" data-toggle=\"modal\"\r\n                                    data-target=\"#confirmCancelModal\">Cancel Front</button>\r\n                                <button className=\"btn btn-secondary\" id=\"editBtn\" data-dismiss=\"modal\"\r\n                                    data-toggle=\"modal\" data-target=\"#editModal\">Edit</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal\" id=\"confirmCancelModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body text-center\">\r\n                            <h1 className=\"m-5\">Are you sure you want to cancel this front?</h1>\r\n                            <button className=\"btn btn-lg btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                            <button className=\"btn btn-lg btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default assignModal;","import React from 'react';\r\n\r\nconst frontModal = (props) => {\r\n    /*\r\n    let ticketInput = null;\r\n    if (props.frontInputs.type === 'Check In') {\r\n        ticketInput =\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"ticketNumber\"\r\n                        placeholder=\"Ticket #\"\r\n                        onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                    />\r\n                    <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"#numBags\">Number of Bags:</label>\r\n                    <input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\"\r\n                        onChange={(e) => props.frontInputsHandler('bags', e.target.value)} />\r\n                    <p className=\"text-danger\">{props.frontInputs.bagsError}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    } else {\r\n        ticketInput = null;\r\n    }\r\n    */\r\n\r\n    return (\r\n        <form id=\"frontForm\">\r\n            <div className=\"modal\" id=\"frontModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Add Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <label htmlFor=\"#typeRadios\">Request Type:</label>\r\n                            <div id=\"typeRadios\">\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\"\r\n                                            value=\"Check In\" onClick={() => props.typeSelect('Check In')} />Check In\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\"\r\n                                            value=\"Check Out\" onClick={() => props.typeSelect('Check Out')} />Check Out\r\n                                    </label>\r\n                                </div>\r\n                                <p className=\"text-danger\">{props.frontInputs.typeError}</p>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontRoom\">Room:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontRoom\"\r\n                                            placeholder=\"Room #\"\r\n                                            onChange={(e) => props.frontInputsHandler('room', e.target.value)}\r\n                                            value={props.frontInputs.room}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.roomError}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontName\">Guest Name:</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontName\"\r\n                                            placeholder=\"Last Name\"\r\n                                            onChange={(e) => props.frontInputsHandler('name', e.target.value)}\r\n                                            value={props.frontInputs.name}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.nameError}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div hidden={props.frontInputs.type !== 'Check In'}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"ticketNumber\"\r\n                                                placeholder=\"Ticket #\"\r\n                                                onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                                            />\r\n                                            <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-3\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"#numBags\">Number of Bags:</label>\r\n                                            <input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\"\r\n                                                onChange={(e) => props.frontInputsHandler('bags', e.target.value)} />\r\n                                            <p className=\"text-danger\">{props.frontInputs.bagsError}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontComment\">Comment:</label>\r\n                                        <textarea\r\n                                            className=\"form-control\"\r\n                                            id=\"frontComment\"\r\n                                            rows=\"2\"\r\n                                            placeholder=\"Comment...\"\r\n                                            onChange={(e) => props.frontInputsHandler('comment', e.target.value)}\r\n                                            value={props.frontInputs.comment}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <label htmlFor=\"#membershipRadios\">Membership:</label>\r\n                            <div id=\"membershipRadios\">\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\" value=\"Elite\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Elite\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\"\r\n                                            value=\"Platinum\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Platinum\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\"\r\n                                            value=\"Titanium\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Titanium\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"ambassadorRadio\" name=\"frontElite\"\r\n                                            value=\"Ambassador\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Ambassador\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\"\r\n                                            onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                            defaultChecked />None\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-success form-control\" onClick={() => props.click()}\r\n                                data-dismiss=\"modal\">Dispatch</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        )\r\n}\r\n\r\nexport default frontModal;","import React from 'react';\r\n\r\nconst editModal = (props) => {\r\n\tlet isValid = 'modal';\r\n\tlet roomValidator = null;\r\n\tif (props.front.room === '') {\r\n\t\tisValid = '';\r\n\t\troomValidator =\r\n\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet nameValidator = null;\r\n\tif (props.front.name === '') {\r\n\t\tisValid = '';\r\n\t\tnameValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet ticketValidator = null;\r\n\tif (props.front.ticket === '' && props.front.type === 'Check In') {\r\n\t\tisValid = '';\r\n\t\tticketValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet bagsValidator = null;\r\n\tif (props.front.bags === '' && props.front.type === 'Check In') {\r\n\t\tisValid = '';\r\n\t\tbagsValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet ticketInput = null;\r\n\tif (props.front.type === 'Check In') {\r\n\t\tticketInput =\r\n\t\t<div className=\"row\">\r\n\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"ticketNumber\">Ticket:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\tid=\"ticketNumber\"\r\n\t\t\t\t\t\tvalue={props.front.ticket}\r\n\t\t\t\t\t\tonChange={(e) => props.editInputs('ticket', e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{ticketValidator}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-3\">\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"#numBags\">Number of Bags:</label>\r\n\t\t\t\t\t<input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\" value={props.front.bags}\r\n\t\t\t\t\t\tonChange={(e) => props.editInputs('bags', e.target.value)} />\r\n\t\t\t\t\t{bagsValidator}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t} else {\r\n\t\tticketInput = null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"modal\" id=\"editModal\">\r\n\t\t\t<div className=\"modal-dialog modal-lg\">\r\n\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t<div className=\"modal-header\">\r\n\t\t\t\t\t\t<h1 className=\"modal-title\">Edit Front</h1>\r\n\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\" value=\"Check In\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.type === 'Check In'}\r\n\t\t\t\t\t\t\t\t\tonChange={() => props.editType('Check In')}/>Check In\r\n                                </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\" value=\"Check Out\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.type === 'Check Out'}\r\n\t\t\t\t\t\t\t\t\tonChange={() => props.editType('Check Out')}\r\n\t\t\t\t\t\t\t\t/>Check Out</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"#editRoom\">Room:</label>\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control\" type=\"number\" id=\"editRoom\" value={props.front.room || ''}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('room', e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{roomValidator}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"#editName\">Name:</label>\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control\" type=\"text\" id=\"editName\" value={props.front.name || ''}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('name', e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{nameValidator}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{ticketInput}\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"#editComment\">Comment:</label>\r\n\t\t\t\t\t\t\t<textarea className=\"form-control\" id=\"editComment\" value={props.front.comment}\r\n\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('comment', e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Elite\" checked={props.front.eliteStatus === 'Elite'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)} />Elite\r\n                                </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Platinum\" checked={props.front.eliteStatus === 'Platinum'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)} />Platinum\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Titanium\" checked={props.front.eliteStatus === 'Titanium'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>Titanium\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"ambassadorRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Ambassador\" checked={props.front.eliteStatus === 'Ambassador'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>Ambassador\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.eliteStatus === ''}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>None\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"modal-footer\">\r\n\t\t\t\t\t\t<button className=\"btn btn-success form-control\" data-dismiss={isValid}>Done</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default editModal;","import React from 'react';\r\n\r\nimport AssignModal from './AssignModal/AssignModal';\r\nimport FrontModal from './FrontModal/FrontModal';\r\nimport EditModal from './EditModal/EditModal';\r\n\r\nconst fronts = (props) => {\r\n    let pendingClass;\r\n    let pendingFronts = 0;\r\n    props.fronts.forEach(front => {\r\n        if (front.status === 'Pending') {\r\n            pendingFronts++;\r\n        }\r\n    })\r\n    if (pendingFronts === 0) {\r\n        pendingClass = 'd-none';\r\n    } else {\r\n        pendingClass = 'd-block';\r\n    }\r\n\r\n    let assignedClass;\r\n    let assignedFronts = 0;\r\n    props.fronts.forEach(front => {\r\n        if (front.status === 'Assigned') {\r\n            assignedFronts++;\r\n        }\r\n    })\r\n    if (assignedFronts === 0) {\r\n        assignedClass = 'd-none';\r\n    } else {\r\n        assignedClass = 'd-block';\r\n    }\r\n\r\n    return (\r\n        <section className={props.class}>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Service Requests</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" id=\"addFrontBtn\" data-toggle=\"modal\" data-target=\"#frontModal\">Add Request</button>\r\n                <div className={pendingClass}>\r\n                    <h1 className=\"mt-3\">Pending</h1>\r\n                    <table className=\"table table-hover text-capitalize\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Bags</th>\r\n                                <th>Comment</th>\r\n                                <th>Membership</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white hover\">\r\n                            {props.fronts.map((front, index) => {\r\n                                let time = Math.floor((props.currentTime.getTime() - front.time.getTime()) / 1000 / 60);\r\n                                if (time < 0) {\r\n                                    time = 0;\r\n                                }\r\n                                if (front.status === 'Pending') {\r\n                                    return (\r\n                                        <tr key={front.time} data-toggle=\"modal\" data-target=\"#assignModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={front.time}>{time}</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.bags}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className={assignedClass}>\r\n                    <h1 className=\"mt-3\">Assigned</h1>\r\n                    <table className=\"table table-hover text-capitalize hover\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Bellman</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Bags</th>\r\n                                <th>Comment</th>\r\n                                <th>Membership</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white\">\r\n                            {props.fronts.map((front, index) => {\r\n                                if (front.status === 'Assigned') {\r\n                                    let time = Math.floor((props.currentTime.getTime() - front.time.getTime()) / 1000 / 60);\r\n                                    if (time < 0) {\r\n                                        time = 0;\r\n                                    }\r\n                                    return (\r\n                                        <tr key={front.time} data-toggle=\"modal\" data-target=\"#completeModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={front.time}>{time}</td>\r\n                                            <td>{front.bellman.fullName}</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.bags}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"modal\" id=\"completeModal\">\r\n                    <div className=\"modal-dialog p-5\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h1 className=\"modal-title\">Complete?</h1>\r\n                            </div>\r\n                            <div className=\"modal-body text-center\">\r\n                                <button className=\"btn btn-success form-control my-1\" onClick={props.confirmCancel}\r\n                                    data-dismiss=\"modal\">Yes</button>\r\n                                <button className=\"btn btn-danger form-control my-1\" data-dismiss=\"modal\">No</button>\r\n                                <button className=\"btn btn-info form-control my-1\" onClick={() => props.assignFront('pending')}\r\n                                    data-dismiss=\"modal\">Pending</button>\r\n                                <button className=\"btn btn-secondary form-control my-1\" data-dismiss=\"modal\"\r\n                                    data-toggle=\"modal\" data-target=\"#editModal\">Edit</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FrontModal\r\n                    click={props.click}\r\n                    typeSelect={props.typeSelect}\r\n                    frontInputs={props.frontInputs}\r\n                    frontInputsHandler={props.frontInputsHandler}\r\n                />\r\n                <AssignModal\r\n                    bellmen={props.bellmen}\r\n                    bellmanClick={props.bellmanClick}\r\n                    assignBtn={props.assignFront}\r\n                    confirmCancel={props.confirmCancel}\r\n                />\r\n                <EditModal\r\n                    front={props.activeFront}\r\n                    editInputs={props.editInputs}\r\n                    editType={props.editType}\r\n                    click={props.editClick}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default fronts;","class Front {\r\n    constructor(type, room, name, ticket, bags, comment, eliteStatus) {\r\n        this.type = type;\r\n        this.room = room;\r\n        this.name = name;\r\n        this.ticket = ticket;\r\n        this.bags = bags;\r\n        this.comment = comment;\r\n        this.eliteStatus = eliteStatus;\r\n        this.time = new Date();\r\n        this.bellman = null;\r\n        this.status = 'Pending';\r\n        this.timeCompleted = null;\r\n        this.timeElapsed = null;\r\n    }\r\n}\r\n\r\nexport default Front;","import React from 'react';\r\n\r\nconst completedFronts = (props) => {\r\n    return (\r\n        <section className={props.class}>\r\n            <h1 className=\"display-3 text-center\">Completed Fronts</h1>\r\n            <hr />\r\n            <table className=\"table table-striped text-capitalize\" hidden={props.fronts.length === 0}>\r\n                <thead>\r\n                    <tr className=\"hover\">\r\n                        <th onClick={() => props.sort('time')}>Requested</th>\r\n                        <th onClick={() => props.sort('timeCompleted')}>Completed</th>\r\n                        <th onClick={() => props.sort('timeElapsed')}>Time</th>\r\n                        <th onClick={() => props.sort('bellman')}>Bellman</th>\r\n                        <th onClick={() => props.sort('type')}>Type</th>\r\n                        <th onClick={() => props.sort('room')}>Room</th>\r\n                        <th onClick={() => props.sort('name')}>Name</th>\r\n                        <th onClick={() => props.sort('ticket')}>Ticket</th>\r\n                        <th onClick={() => props.sort('bags')}>Bags</th>\r\n                        <th onClick={() => props.sort('eliteStatus')}>Membership</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.fronts.map(front => {\r\n                        return (\r\n                            <tr key={front.time}>\r\n                                <td>{front.time.toLocaleString()}</td>\r\n                                <td>{front.timeCompleted.toLocaleString()}</td>\r\n                                <td>{front.timeElapsed}</td>\r\n                                <td>{front.bellman}</td>\r\n                                <td>{front.type}</td>\r\n                                <td>{front.room}</td>\r\n                                <td>{front.name}</td>\r\n                                <td>{front.ticket}</td>\r\n                                <td>{front.bags}</td>\r\n                                <td>{front.eliteStatus}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default completedFronts;","import React from 'react';\r\n\r\nconst nav = (props) => {\r\n    const toggleFronts = () => {\r\n        if (props.frontsClass === 'd-none') {\r\n            props.click('fronts');\r\n        }\r\n    }\r\n\treturn (\r\n\t\t<nav>\r\n            <nav className=\"navbar navbar-expand-md bg-dark navbar-dark fixed-top\">\r\n                <span className=\"navbar-brand\"><h3>Bellstand App</h3></span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarContent\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarContent\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('fronts')}>Requests</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('timeClock')}>Time Clock</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('completed')}>Completed</button>\r\n                        </li>\r\n                        <li className=\"nav-item active\">\r\n                            <button className=\"nav-link btn btn-primary\" onClick={() => toggleFronts()} data-toggle=\"modal\" data-target=\"#frontModal\">Add Request</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default nav;","import React, { Component } from 'react';\nimport './App.css';\n\nimport TimeClock from './components/TimeClock/TimeClock';\nimport Bellman from './components/Bellman/Bellman';\nimport Fronts from './components/Fronts/Fronts';\nimport Front from './components/Fronts/Front/Front';\nimport CompletedFronts from './components/CompletedFronts/CompletedFronts';\nimport Nav from './components/Nav/Nav';\n\nclass App extends Component {\n    state = {\r\n        currentTime: new Date(),\n\n        //Hide Elements\n        frontsClass: '',\n        timeClockClass: '',\n        completedClass: '',\n\n        bellmanInputs: {\n            lastName: '',\r\n            firstName: '',\r\n            position: '',\r\n\r\n            lastNameError: '',\r\n            firstNameError: '',\r\n            positionError: '',\r\n        },\n\n        bellmen: [],\r\n        activeIndex: '',\r\n        activeStatus: '',\r\n\r\n        fronts: [],\r\n        activeFront: '',\r\n        prevFrontState: '',\r\n        frontInputs: {\r\n            type: '',\r\n            room: '',\r\n            name: '',\r\n            ticket: '',\r\n            bags: '',\r\n            comment: '',\r\n            elite: '',\r\n\r\n            //Validators\r\n            typeError: '',\r\n            roomError: '',\r\n            nameError: '',\r\n            ticketError: '',\r\n            bagsError: ''\r\n        },\r\n\r\n        completedFronts: [],\r\n        completedSort: ''\r\n\r\n    }\n\n    setCurrentTime() {\r\n        this.setState({ currentTime: new Date() });\r\n    }\n\n    componentDidMount() {\n        setInterval(()=>this.setCurrentTime(), 3000);\r\n    }\n\n    showTable = (arr) => {\n        if (arr.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n\n    //Nav Buttons\n    navClickHandler = (el) => {\n        let val;\n        if (el === 'fronts') {\r\n            val = this.toggle(this.state.frontsClass);\r\n            this.setState({ frontsClass: val });\r\n        }\r\n        if (el === 'timeClock') {\r\n            val = this.toggle(this.state.timeClockClass);\r\n            this.setState({ timeClockClass: val });\r\n        }\r\n        if (el === 'completed') {\r\n            val = this.toggle(this.state.completedClass);\r\n            this.setState({ completedClass: val });\r\n        }\r\n    }\n\n    toggle = (arg) => {\n        if (arg === '') return 'd-none';\r\n        else return '';\r\n    }\n\n    //Staff\n    bellmanInputsHandler = (argInput, argValue) => {\n        const input = argInput;\r\n        const value = argValue;\r\n        let inputs = this.state.bellmanInputs;\r\n        if (input === 'lastName') {\r\n            inputs.lastName = value;\r\n        }\r\n        if (input === 'firstName') {\r\n            inputs.firstName = value;\r\n        }\r\n        if (input === 'position') {\r\n            inputs.position = value;\r\n        }\r\n        this.setState({ bellmanInputs: inputs });\r\n    }\n\n    isValid = (input) => {\n        if (input === '') return false;\r\n        return true;\r\n    }\n\n    clockInHandler = () => {\n        let inputs = this.state.bellmanInputs;\n        const message = '*Required';\n\n        if (!this.isValid(inputs.lastName) || !this.isValid(inputs.firstName) || !this.isValid(inputs.position)) {\n            if (!this.isValid(inputs.lastName)) inputs.lastNameError = message;\r\n            else {\r\n                inputs.lastNameError = '';\r\n            }\r\n            if (!this.isValid(inputs.firstName)) inputs.firstNameError = message;\r\n            else {\r\n                inputs.firstNameError = '';\r\n            }\r\n            if (!this.isValid(inputs.position)) inputs.positionError = message;\r\n            else {\r\n                inputs.positionError = '';\r\n            }\r\n            this.setState({ bellmanInputs: inputs });\r\n        }\n        else {\n            const bellman = new Bellman(inputs.lastName, inputs.firstName, inputs.position);\n            inputs= {\n                lastName: '',\r\n                firstName: '',\r\n                position: '',\r\n                lastNameError: '',\r\n                firstNameError: '',\r\n                positionError: '',\n            }\n            let bellmen = [...this.state.bellmen, bellman];\n            this.setState({ bellmen: bellmen, bellmanInputs: inputs });\n\r\n        }\r\n    }\n\n    employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n\n    statusHandler = (action) => {\n\n        let status = this.state.activeStatus;\n        let index = this.state.activeIndex;\n\n        let bellmen = [...this.state.bellmen];\n\n        if (action === \"startBreak\") {\r\n            status = \"On Break\";\r\n        }\r\n        else if (action === \"endBreak\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"exitQueue\") {\r\n            status = \"Away\";\r\n        }\r\n        else if (action === \"enterQueue\") {\r\n            status = \"Available\";\r\n        }\r\n        else if (action === \"busy\") {\r\n            status = \"Busy\";\r\n        }\r\n        else if (action === \"clockOut\") {\r\n            bellmen.splice(index, 1);\r\n            index = \"\";\r\n            let activeStatus = \"\";\r\n            this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n            return;\r\n        }\r\n\r\n        bellmen[index].status = status;\r\n        bellmen[index].statusUpdated = new Date().toLocaleString();\r\n        let activeStatus = status;\r\n\r\n        this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n\r\n    }\n\n\n    //Fronts\n    frontInputsHandler = (field, value) => {\n        let inputState = this.state.frontInputs;\n        if (field === 'room') {\r\n            inputState.room = value;\r\n        }\r\n        if (field === 'name') {\r\n            inputState.name = value;\r\n        }\r\n        if (field === 'ticket') {\r\n            inputState.ticket = value;\r\n        }\r\n        if (field === 'comment') {\r\n            inputState.comment = value;\r\n        }\r\n        if (field === 'elite') {\r\n            inputState.elite = value;\r\n        }\r\n        if (field === 'bags') {\r\n            inputState.bags = value;\r\n        }\r\n        this.setState({ frontInputs: inputState });\r\n    }\n\n    editTypeHandler = (type) => {\n        let activeFront = this.state.activeFront;\n        const newType = type;\r\n        activeFront.type = newType;\r\n        if (activeFront.type === 'Check Out') {\r\n            activeFront.ticket = '';\r\n        }\r\n        this.setState({ activeFront: activeFront });\r\n    }\n\n    editInputsHandler = (field, value) => {\n        let front = this.state.activeFront;\n        if (field === 'room') {\r\n            front.room = value;\r\n        }\r\n        if (field === 'name') {\r\n            front.name = value;\r\n        }\r\n        if (field === 'ticket') {\r\n            front.ticket = value;\r\n        }\r\n        if (field === 'comment') {\r\n            front.comment = value;\r\n        }\r\n        if (field === 'elite') {\r\n            front.eliteStatus = value;\r\n        }\r\n        if (field === 'bags') {\r\n            front.bags = value;\r\n        }\r\n        this.setState({ activeFront: front });\r\n    }\n\n    validate = (inputs) => {\n        if (inputs.type === '' || inputs.room === '' || inputs.name === '') {\r\n            return true;\r\n        }\r\n        if (inputs.type === 'Check In') {\r\n            if (inputs.ticket === '' || inputs.bags === '') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\n\n    addFrontHandler = () => {\r\n        let inputs = this.state.frontInputs;\r\n        const missingItem = this.validate(inputs);\r\n        if (missingItem) {\r\n            if (inputs.type === '') inputs.typeError = '*Required';\r\n            if (inputs.room === '') inputs.roomError = '*Required';\r\n            if (inputs.name === '') inputs.nameError = '*Required';\r\n            if (inputs.type === 'Check In') {\r\n                if (inputs.ticket === '') {\r\n                    inputs.ticketError = '*Required';\r\n                }\r\n                if (inputs.bags === '') {\r\n                    inputs.bagsError = '*Required';\r\n                }\r\n            }\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('addFrontBtn').click();\r\n        } else {\r\n            const front = new Front(inputs.type, inputs.room, inputs.name, inputs.ticket, inputs.bags, inputs.comment, inputs.elite);\r\n            const fronts = [...this.state.fronts, front];\r\n            this.setState({ fronts: fronts });\r\n            inputs = {\r\n                type: '',\r\n                room: '',\r\n                name: '',\r\n                ticket: '',\r\n                bags: '',\r\n                comment: '',\r\n                elite: '',\r\n\r\n                typeError: '',\r\n                roomError: '',\r\n                nameError: '',\r\n                ticketError: '',\r\n                bagsError: ''\r\n            }\r\n            \r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('frontForm').reset();\r\n        }\r\n    }\n\n    typeSelectHandler = (type) => {\r\n        let frontInputs = this.state.frontInputs;\r\n        frontInputs.type = type;\r\n        this.setState({ frontInputs: frontInputs });\r\n    }\n\n    frontClickHandler = (index) => {\n        let fronts = [...this.state.fronts];\r\n        let activeFront = fronts[index];\r\n\r\n        let bellmen = [...this.state.bellmen];\r\n        bellmen.forEach((bellman) => {\r\n            bellman.active = 'false';\r\n        })\r\n        this.setState({ bellmen: bellmen, activeFront: activeFront, activeIndex: '', activeStatus: '' });\r\n    }\n\n    assignHandler = (action) => {\n        let activeFront = this.state.activeFront;\r\n        if (this.validate(activeFront)) {\r\n            document.getElementById('editBtn').click();\r\n            return;\r\n        }\r\n        let fronts = this.state.fronts;\n        let bellmen = this.state.bellmen;\n        let bellman = bellmen[this.state.activeIndex];\r\n\r\n        let frontIndex = fronts.indexOf(activeFront);\n        let bellmanIndex = bellmen.indexOf(activeFront.bellman);\n\n        if (this.state.activeIndex !== '' && action==='assign') {\r\n            fronts.splice(frontIndex, 1);\r\n            activeFront.status = 'Assigned';\r\n            activeFront.bellman = bellman;\r\n            fronts.push(activeFront);\r\n            bellmen[this.state.activeIndex].fronts++;\r\n            bellmen[this.state.activeIndex].status = 'Busy';\r\n            bellmen.forEach(bellman => {\r\n                bellman.active = \"false\";\r\n            })\r\n            this.setState({ activeFront: activeFront, fronts: fronts, bellmen: bellmen, activeStatus: '' });\r\n        }\r\n        else if (action === 'pending') {\r\n            fronts.splice(frontIndex, 1);\r\n            activeFront.status = 'Pending';\r\n            activeFront.bellman = '';\r\n            fronts.push(activeFront);\r\n            bellmen[bellmanIndex].fronts--;\r\n            if (bellmen[bellmanIndex].fronts === 0) {\r\n                bellmen[bellmanIndex].status = 'Available';\r\n            }\r\n            this.setState({ activeFront: activeFront, fronts: fronts, bellmen: bellmen });\r\n        }\r\n        else {\r\n            alert(\"Select a bellman to assign\");\r\n        }\r\n    }\n\n    completeFrontHandler = () => {\n        const activeFront = this.state.activeFront;\r\n        let fronts = this.state.fronts;\r\n        let index = fronts.indexOf(activeFront);\r\n        let completedFronts = this.state.completedFronts;\r\n        fronts.splice(index, 1);\r\n\r\n        if (activeFront.status === 'Assigned') {\r\n            let bellmen = this.state.bellmen;\r\n            let bellmanIndex = bellmen.indexOf(activeFront.bellman);\r\n            let bellman = bellmen[bellmanIndex];\r\n            bellman.fronts--;\r\n\r\n            if (bellman.status === 'Busy' && bellman.fronts === 0) {\r\n                bellman.status = 'Available';\r\n            }\r\n            bellmen[bellmanIndex] = bellman;\r\n            activeFront.timeCompleted = new Date();\r\n            activeFront.timeElapsed = Math.floor((activeFront.timeCompleted.getTime() - activeFront.time.getTime()) / 1000 / 60);\r\n            activeFront.bellman = activeFront.bellman.fullName;\r\n            completedFronts.push(activeFront);\r\n            this.setState({ bellmen: bellmen, completedFronts: completedFronts });\r\n        }\r\n        \r\n        this.setState({ fronts: fronts });\r\n    }\n\n    sortBy = (property) => {\n        let order = 1;\r\n        let completedSort = this.state.completedSort;\r\n        if (property === completedSort) {\r\n            order = -1;\r\n            completedSort = '';\r\n        } else {\r\n            completedSort = property;\r\n        }\r\n        this.setState({ completedSort: completedSort });\r\n        return function (a, b) {\r\n            const result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r\n            return result * order;\r\n        }\r\n    }\n\n    sortCompletedHandler = (property) => {\n        let fronts = this.state.completedFronts;\n        fronts.sort(this.sortBy(property));\r\n        this.setState({ completedFronts: fronts });\r\n    }\n\n\n\n    render() {\n\n\n\n\n        return (\n            <div className=\"App\">\n                <Nav click={this.navClickHandler} frontsClass={this.state.frontsClass} />\n                <Fronts\n                    class={this.state.frontsClass}\n                    currentTime={this.state.currentTime}\n                    activeFront={this.state.activeFront}\n                    tableClass={this.showTable}\n                    fronts={this.state.fronts}\n                    bellmen={this.state.bellmen}\n                    validators={this.state.validators}\n                    frontInputs={this.state.frontInputs}\n                    click={this.addFrontHandler}\n                    frontClick={this.frontClickHandler}\n                    typeSelect={this.typeSelectHandler}\n                    frontInputsHandler={this.frontInputsHandler}\n                    bellmanClick={this.employeeClickHandler}\n                    assignFront={this.assignHandler}\n                    confirmCancel={this.completeFrontHandler}\n                    editInputs={this.editInputsHandler}\n                    editType={this.editTypeHandler}\n                />\n                <TimeClock\n                    class={this.state.timeClockClass}\n                    className={this.showTable(this.state.bellmen)}\n                    bellmen={this.state.bellmen}\n                    status={this.state.activeStatus}\n                    bellmanInputs={this.state.bellmanInputs}\n                    bellmanInputsHandler={this.bellmanInputsHandler}\n                    click={this.clockInHandler}\n                    staffButtonClick={this.statusHandler}\n                    employeeClick={this.employeeClickHandler}\n                />\n                <CompletedFronts class={this.state.completedClass} fronts={this.state.completedFronts} sort={this.sortCompletedHandler} />\n            </div>\n        );\r\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}