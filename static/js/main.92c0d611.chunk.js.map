{"version":3,"sources":["components/TimeClock/StaffTable/Employee/Employee.js","components/TimeClock/StaffTable/StaffTable.js","components/TimeClock/StaffModal/EmployeeRow/EmployeeRow.js","components/TimeClock/StaffModal/StaffModal.js","components/TimeClock/TimeClock.js","components/Bellman/Bellman.js","components/Fronts/AssignModal/AssignModal.js","components/Fronts/FrontModal/FrontModal.js","components/Fronts/EditModal/EditModal.js","components/Fronts/Fronts.js","components/Fronts/Front/Front.js","components/CompletedFronts/CompletedFronts.js","components/Nav/Nav.js","axios-fronts.js","components/ManageStaff/ManageStaff.js","App.js","serviceWorker.js","index.js"],"names":["employee","props","className","onClick","click","active","name","position","timeIn","statusUpdated","status","staffTable","isDisabled","btnType","isHidden","bellmen","map","bellman","index","Employee","key","staffButtonClick","disabled","hidden","employeeRow","staffListClick","staffModal","id","staff","empl","EmployeeRow","clockInError","clockIn","data-dismiss","timeClock","class","data-toggle","data-target","StaffTable","employeeClick","StaffModal","Bellman","this","fronts","Date","toLocaleString","assignModal","noBellmen","availBellmen","i","length","type","bellmanClick","assignBtn","confirmCancel","frontModal","htmlFor","value","typeSelect","frontInputs","typeError","placeholder","onChange","e","frontInputsHandler","target","room","roomError","nameError","ticketError","min","bagsError","rows","comment","defaultChecked","editModal","isValid","roomValidator","front","nameValidator","ticketValidator","ticket","bagsValidator","bags","ticketInput","editInputs","checked","editType","eliteStatus","putFronts","pendingFronts","forEach","assignedFronts","time","Math","floor","currentTime","getTime","frontClick","assignFront","FrontModal","AssignModal","EditModal","activeFront","editClick","Front","date","toLocaleDateString","timeCompleted","timeElapsed","completedFronts","completedFilters","startDate","setCompletedFilters","dateError","endDate","guestName","searchCompleted","filtered","resetFilter","sort","nav","frontsClass","instance","axios","create","baseURL","ManageStaff","useState","lastName","setLastName","firstName","setFirstName","setPosition","postNewEmployee","deleteStaff","App","state","appMounted","timeClockClass","completedClass","allStaff","staffList","activeIndex","activeStatus","prevFrontState","elite","completedFrontsFiltered","allCompletedFronts","completedSort","aveTime","updateStaffList","j","splice","setState","putBellmen","put","then","response","console","log","catch","error","push","post","toLowerCase","deleteStaffHandler","showTable","arr","navClickHandler","el","val","toggle","arg","bellmanInputsHandler","argInput","argValue","input","inputs","bellmanInputs","clockInHandler","newBellman","message","document","getElementById","staffListClickHandler","employeeClickHandler","statusHandler","action","clockOutBellman","field","inputState","editTypeHandler","newType","editInputsHandler","validate","addFrontHandler","reset","typeSelectHandler","frontClickHandler","assignHandler","frontIndex","indexOf","names","bellmanIndex","alert","completeFrontHandler","aveTimeHandler","sortBy","property","order","a","b","sortCompletedHandler","totalTimes","totalFronts","today","parseDate","split","allFronts","filters","includes","resetCompletedFilter","setCurrentTime","setInterval","get","data","hasOwnProperty","setTimeout","Nav","Fronts","tableClass","validators","TimeClock","CompletedFronts","startDateError","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAceA,G,MAZE,SAACC,GACd,OACI,wBAAIC,UAAU,kBAAkBC,QAASF,EAAMG,MAAOC,OAAQJ,EAAMI,QAChE,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,UACX,4BAAKN,EAAMO,QACX,4BAAKP,EAAMQ,eACX,4BAAKR,EAAMS,WCsFRC,EA3FI,SAACV,GAEhB,IAAMW,EAAa,SAACC,EAASH,GACzB,MAAgB,eAAZG,EACe,cAAXH,EAGQ,aAAZG,EACe,aAAXH,EAGQ,cAAZG,EACe,cAAXH,EAGQ,aAAZG,EACe,cAAXH,OADR,GAMEI,EAAW,SAACD,EAASH,GACvB,MAAgB,cAAZG,EACe,SAAXH,EAGQ,eAAZG,EACe,SAAXH,OADR,GAMJ,OACI,yBAAKR,UAAWD,EAAMC,WAClB,yBAAKA,UAAU,aACX,2BAAOA,UAAU,SACb,2BAAOA,UAAU,YACb,4BACI,oCACA,wCACA,uCACA,8CACA,wCAGR,2BAAOA,UAAU,kBACZD,EAAMc,QAAQC,KAAI,SAACC,EAASC,GACzB,OACI,kBAACC,EAAD,CACIC,IAAKF,EACLd,MAAO,kBAAMH,EAAMG,MAAMc,IACzBb,OAAQY,EAAQZ,OAChBC,KAAMW,EAAQX,KACdC,SAAUU,EAAQV,SAClBC,OAAQS,EAAQT,OAChBC,cAAeQ,EAAQR,cACvBC,OAAQO,EAAQP,cAMpC,yBAAKR,UAAU,eACX,4BACIA,UAAU,wBACVC,QAAS,kBAAMF,EAAMoB,iBAAiB,eACtCC,SAAUV,EAAW,aAAcX,EAAMS,SAH7C,eAKA,4BACIR,UAAU,wBACVC,QAAS,kBAAMF,EAAMoB,iBAAiB,aACtCC,SAAUV,EAAW,WAAYX,EAAMS,SAH3C,aAIA,4BACIR,UAAU,wBACVC,QAAS,kBAAMF,EAAMoB,iBAAiB,cACtCC,SAAUV,EAAW,YAAaX,EAAMS,QACxCa,OAAQT,EAAS,YAAab,EAAMS,SAJxC,cAKA,4BACIR,UAAU,wBACVC,QAAS,kBAAMF,EAAMoB,iBAAiB,eACtCE,OAAQT,EAAS,aAAcb,EAAMS,SAHzC,eAIA,4BACIR,UAAU,wBACVC,QAAS,kBAAMF,EAAMoB,iBAAiB,aACtCC,SAAUV,EAAW,WAAYX,EAAMS,SAH3C,iBC1ELc,EATK,SAACvB,GACpB,OACC,wBAAIC,UAAU,kBAAkBC,QAASF,EAAMwB,eAAgBpB,OAAQJ,EAAMI,QAC5E,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,YCuCCmB,EAzCI,SAACzB,GAChB,OACI,yBAAKC,UAAU,QAAQyB,GAAG,cACtB,yBAAKzB,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,sCAEJ,yBAAKA,UAAU,cACX,2BAAOA,UAAU,SACb,2BAAOA,UAAU,YACb,4BACI,oCACA,0CAGR,2BAAOA,UAAU,kBACZD,EAAM2B,MAAMZ,KAAI,SAACa,EAAMX,GACpB,OACI,kBAACY,EAAD,CACIV,IAAKF,EACLZ,KAAMuB,EAAKvB,KACXC,SAAUsB,EAAKtB,SACfkB,eAAgB,kBAAMxB,EAAMwB,eAAeP,IAC3Cb,OAAQwB,EAAKxB,cAMjC,wBAAIH,UAAU,2BAA2BD,EAAM8B,eAEnD,yBAAK7B,UAAU,gBACX,4BAAQA,UAAU,+BAA+BC,QAAS,kBAAMF,EAAM+B,WAAWC,eAAa,SAA9F,iBCNTC,EA1BG,SAACjC,GACf,OACI,6BAASC,UAAWD,EAAMkC,OACtB,yBAAKjC,UAAU,aACX,wBAAIA,UAAU,yBAAd,SACA,6BACA,4BAAQA,UAAU,kBAAkByB,GAAG,aAAaS,cAAY,QAAQC,cAAY,eAApF,YACA,kBAACC,EAAD,CACIpC,UAAWD,EAAMC,UACjBa,QAASd,EAAMc,QACfX,MAAOH,EAAMsC,cACb7B,OAAQT,EAAMS,OACdW,iBAAkBpB,EAAMoB,mBAE5B,kBAACmB,EAAD,CACIZ,MAAO3B,EAAM2B,MACbH,eAAgBxB,EAAMwB,eACtBO,QAAS/B,EAAM+B,QACfD,aAAc9B,EAAM8B,kBCXzBU,EAXX,WAAYnC,EAAMC,GAAW,oBACzBmC,KAAKpC,KAAOA,EACZoC,KAAKnC,SAAWA,EAChBmC,KAAKhC,OAAS,YACdgC,KAAKrC,OAAS,QACdqC,KAAKC,OAAS,EACdD,KAAKlC,QAAS,IAAIoC,MAAOC,iBACzBH,KAAKjC,eAAgB,IAAImC,MAAOC,kBCsEzBC,EA5EK,SAAC7C,GAGjB,IAFA,IAAI8C,EAAY,KACZC,GAAe,EACVC,EAAI,EAAGA,EAAIhD,EAAMc,QAAQmC,OAAQD,IACN,cAA5BhD,EAAMc,QAAQkC,GAAGvC,QAAsD,SAA5BT,EAAMc,QAAQkC,GAAGvC,SAC5DsC,GAAe,GAQvB,OALqB,IAAjBA,IACAD,EACI,uBAAG7C,UAAU,eAAb,0BAIJ,6BACI,yBAAKA,UAAU,QAAQyB,GAAG,eACtB,yBAAKzB,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,eAAd,gBACA,4BAAQiD,KAAK,SAASjD,UAAU,QAAQ+B,eAAa,SAArD,SAGJ,yBAAK/B,UAAU,cACX,2BAAOA,UAAU,yBACb,+BACI,4BACI,oCACA,wCAGR,2BAAOA,UAAU,SAETD,EAAMc,QAAQC,KAAI,SAACC,EAASC,GACxB,MAAuB,cAAnBD,EAAQP,QAA6C,SAAnBO,EAAQP,OAEtC,wBAAIU,IAAKF,EAAOf,QAAS,kBAAMF,EAAMmD,aAAalC,IAAQb,OAAQY,EAAQZ,QACtE,4BAAKY,EAAQX,MACb,4BAAKW,EAAQP,SAIb,UAK3BqC,EACD,yBAAK7C,UAAU,eACX,4BAAQA,UAAU,sBAAsBC,QAAS,kBAAMF,EAAMoD,UAAU,WACnEpB,eAAa,SADjB,UAEA,4BAAQ/B,UAAU,qBAAqB+B,eAAa,QAAQG,cAAY,QACpEC,cAAY,uBADhB,gBAEA,4BAAQnC,UAAU,oBAAoByB,GAAG,UAAUM,eAAa,QAC5DG,cAAY,QAAQC,cAAY,cADpC,aAOpB,yBAAKnC,UAAU,QAAQyB,GAAG,sBACtB,yBAAKzB,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,OAAd,+CACA,4BAAQA,UAAU,6BAA6BC,QAASF,EAAMqD,cAAerB,eAAa,SAA1F,OACA,4BAAQ/B,UAAU,4BAA4B+B,eAAa,SAA3D,YCmHbsB,EArLI,SAACtD,GAiChB,OACI,0BAAM0B,GAAG,aACL,yBAAKzB,UAAU,QAAQyB,GAAG,cACtB,yBAAKzB,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,eAAd,aACA,4BAAQiD,KAAK,SAASjD,UAAU,QAAQ+B,eAAa,SAArD,SAGJ,yBAAK/B,UAAU,cACX,2BAAOsD,QAAQ,eAAf,iBACA,yBAAK7B,GAAG,cACJ,yBAAKzB,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,eAAerB,KAAK,YACpEmD,MAAM,WAAWtD,QAAS,kBAAMF,EAAMyD,WAAW,eAFzD,aAKJ,yBAAKxD,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,YACrEmD,MAAM,YAAYtD,QAAS,kBAAMF,EAAMyD,WAAW,gBAF1D,cAKJ,uBAAGxD,UAAU,eAAeD,EAAM0D,YAAYC,YAElD,yBAAK1D,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,aAAf,SACA,2BACIL,KAAK,SACLjD,UAAU,eACVyB,GAAG,YACHkC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,OAAQD,EAAEE,OAAOR,QAC3DA,MAAOxD,EAAM0D,YAAYO,OAE7B,uBAAGhE,UAAU,eAAeD,EAAM0D,YAAYQ,aAGtD,yBAAKjE,UAAU,OACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,aAAf,eACA,2BACIL,KAAK,OACLjD,UAAU,eACVyB,GAAG,YACHkC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,OAAQD,EAAEE,OAAOR,QAC3DA,MAAOxD,EAAM0D,YAAYrD,OAE7B,uBAAGJ,UAAU,eAAeD,EAAM0D,YAAYS,cAK1D,yBAAK7C,OAAmC,aAA3BtB,EAAM0D,YAAYR,MAC3B,yBAAKjD,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,gBAAf,WACA,2BACIL,KAAK,OACLjD,UAAU,eACVyB,GAAG,eACHkC,YAAY,WACZC,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,SAAUD,EAAEE,OAAOR,UAEjE,uBAAGvD,UAAU,eAAeD,EAAM0D,YAAYU,eAGtD,yBAAKnE,UAAU,YACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,YAAf,mBACA,2BAAOL,KAAK,SAASjD,UAAU,eAAeyB,GAAG,UAAU2C,IAAI,IAC3DR,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,OAAQD,EAAEE,OAAOR,UAC/D,uBAAGvD,UAAU,eAAeD,EAAM0D,YAAYY,eAK9D,yBAAKrE,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,gBAAf,YACA,8BACItD,UAAU,eACVyB,GAAG,eACH6C,KAAK,IACLX,YAAY,aACZC,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,UAAWD,EAAEE,OAAOR,QAC9DA,MAAOxD,EAAM0D,YAAYc,aAMzC,2BAAOjB,QAAQ,qBAAf,eACA,yBAAK7B,GAAG,oBACJ,yBAAKzB,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,aAAarB,KAAK,aAAamD,MAAM,QAAQK,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,QAASD,EAAEE,OAAOR,UADjK,UAIJ,yBAAKvD,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,aACrEmD,MAAM,WAAWK,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,QAASD,EAAEE,OAAOR,UAFrF,aAMJ,yBAAKvD,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,aACrEmD,MAAM,WAAWK,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,QAASD,EAAEE,OAAOR,UAFrF,aAMJ,yBAAKvD,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,kBAAkBrB,KAAK,aACvEmD,MAAM,aAAaK,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,QAASD,EAAEE,OAAOR,UAFvF,eAMJ,yBAAKvD,UAAU,qBACX,2BAAOA,UAAU,oBACb,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmBI,KAAK,aAAamD,MAAM,GACrEK,SAAU,SAACC,GAAD,OAAO9D,EAAM+D,mBAAmB,QAASD,EAAEE,OAAOR,QAC5DiB,gBAAc,IAHtB,WASZ,yBAAKxE,UAAU,gBACX,4BAAQiD,KAAK,SAASjD,UAAU,+BAA+BC,QAAS,kBAAMF,EAAMG,SAChF6B,eAAa,SADjB,kBCRb0C,EAnKG,SAAC1E,GAClB,IAAI2E,EAAU,QACVC,EAAgB,KACK,KAArB5E,EAAM6E,MAAMZ,OACfU,EAAU,GACVC,EACA,uBAAG3E,UAAU,eAAb,cAGD,IAAI6E,EAAgB,KACK,KAArB9E,EAAM6E,MAAMxE,OACfsE,EAAU,GACVG,EACC,uBAAG7E,UAAU,eAAb,cAGF,IAAI8E,EAAkB,KACK,KAAvB/E,EAAM6E,MAAMG,QAAsC,aAArBhF,EAAM6E,MAAM3B,OAC5CyB,EAAU,GACVI,EACC,uBAAG9E,UAAU,eAAb,cAGF,IAAIgF,EAAgB,KACK,KAArBjF,EAAM6E,MAAMK,MAAoC,aAArBlF,EAAM6E,MAAM3B,OAC1CyB,EAAU,GACVM,EACC,uBAAGhF,UAAU,eAAb,cAGF,IAAIkF,EAAc,KA8BlB,OA5BCA,EADwB,aAArBnF,EAAM6E,MAAM3B,KAEf,yBAAKjD,UAAU,OACd,yBAAKA,UAAU,YACd,yBAAKA,UAAU,cACd,2BAAOsD,QAAQ,gBAAf,WACA,2BACCL,KAAK,OACLjD,UAAU,eACVyB,GAAG,eACH8B,MAAOxD,EAAM6E,MAAMG,OACnBnB,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,SAAUtB,EAAEE,OAAOR,UAErDuB,IAGH,yBAAK9E,UAAU,YACd,yBAAKA,UAAU,cACd,2BAAOsD,QAAQ,YAAf,mBACA,2BAAOL,KAAK,SAASjD,UAAU,eAAeyB,GAAG,UAAU2C,IAAI,IAAIb,MAAOxD,EAAM6E,MAAMK,KACrFrB,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,OAAQtB,EAAEE,OAAOR,UACnDyB,KAKU,KAId,yBAAKhF,UAAU,QAAQyB,GAAG,aACzB,yBAAKzB,UAAU,yBACd,yBAAKA,UAAU,iBACd,yBAAKA,UAAU,gBACd,wBAAIA,UAAU,eAAd,cACA,4BAAQiD,KAAK,SAASjD,UAAU,QAAQ+B,eAAa,SAArD,SAED,yBAAK/B,UAAU,cACd,yBAAKA,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,eAAerB,KAAK,YAAYmD,MAAM,WACzF6B,QAA8B,aAArBrF,EAAM6E,MAAM3B,KACrBW,SAAU,kBAAM7D,EAAMsF,SAAS,eAHjC,aAMD,yBAAKrF,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,YAAYmD,MAAM,YAC1F6B,QAA8B,cAArBrF,EAAM6E,MAAM3B,KACrBW,SAAU,kBAAM7D,EAAMsF,SAAS,gBAHjC,cAMD,yBAAKrF,UAAU,OACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,cACd,2BAAOsD,QAAQ,aAAf,SACA,2BAAOtD,UAAU,eAAeiD,KAAK,SAASxB,GAAG,WAAW8B,MAAOxD,EAAM6E,MAAMZ,MAAQ,GACtFJ,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,OAAQtB,EAAEE,OAAOR,UAEnDoB,IAGH,yBAAK3E,UAAU,OACd,yBAAKA,UAAU,cACd,2BAAOsD,QAAQ,aAAf,SACA,2BAAOtD,UAAU,eAAeiD,KAAK,OAAOxB,GAAG,WAAW8B,MAAOxD,EAAM6E,MAAMxE,MAAQ,GACpFwD,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,OAAQtB,EAAEE,OAAOR,UAEnDsB,KAIHK,EACD,yBAAKlF,UAAU,cACd,2BAAOsD,QAAQ,gBAAf,YACA,8BAAUtD,UAAU,eAAeyB,GAAG,cAAc8B,MAAOxD,EAAM6E,MAAML,QACtEX,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,UAAWtB,EAAEE,OAAOR,WAIxD,yBAAKvD,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,aAAarB,KAAK,aACrEmD,MAAM,QAAQ6B,QAAqC,UAA5BrF,EAAM6E,MAAMU,YACnC1B,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,QAAStB,EAAEE,OAAOR,UAHtD,UAMD,yBAAKvD,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,aACxEmD,MAAM,WAAW6B,QAAqC,aAA5BrF,EAAM6E,MAAMU,YACtC1B,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,QAAStB,EAAEE,OAAOR,UAHtD,aAMD,yBAAKvD,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,gBAAgBrB,KAAK,aACxEmD,MAAM,WAAW6B,QAAqC,aAA5BrF,EAAM6E,MAAMU,YACtC1B,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,QAAStB,EAAEE,OAAOR,UAHtD,aAOD,yBAAKvD,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmByB,GAAG,kBAAkBrB,KAAK,aAC1EmD,MAAM,aAAa6B,QAAqC,eAA5BrF,EAAM6E,MAAMU,YACxC1B,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,QAAStB,EAAEE,OAAOR,UAHtD,eAOD,yBAAKvD,UAAU,qBACd,2BAAOA,UAAU,oBAChB,2BAAOiD,KAAK,QAAQjD,UAAU,mBAAmBI,KAAK,aAAamD,MAAM,GACxE6B,QAAqC,KAA5BrF,EAAM6E,MAAMU,YACrB1B,SAAU,SAACC,GAAD,OAAO9D,EAAMoF,WAAW,QAAStB,EAAEE,OAAOR,UAHtD,UAQF,yBAAKvD,UAAU,gBACd,4BACCA,UAAU,+BACV+B,eAAc2C,EACdzE,QAAS,kBAAMF,EAAMwF,cAHtB,aCCS9C,EApJA,SAAC1C,GACZ,IAAIyF,EAAgB,EACpBzF,EAAM0C,OAAOgD,SAAQ,SAAAb,GACI,YAAjBA,EAAMpE,QACNgF,OAIR,IAAIE,EAAiB,EAOrB,OANA3F,EAAM0C,OAAOgD,SAAQ,SAAAb,GACI,aAAjBA,EAAMpE,QACNkF,OAKJ,6BAAS1F,UAAWD,EAAMkC,OACtB,yBAAKjC,UAAU,aACX,wBAAIA,UAAU,yBAAd,oBACA,6BACA,4BAAQA,UAAU,kBAAkByB,GAAG,cAAcS,cAAY,QAAQC,cAAY,eAArF,eACA,yBAAKd,OAA0B,IAAlBmE,GACT,wBAAIxF,UAAU,QAAd,WACA,2BAAOA,UAAU,qCACb,2BAAOA,UAAU,YACb,4BACI,oCACA,oCACA,yCACA,oCACA,sCACA,oCACA,uCACA,4CAGR,2BAAOA,UAAU,kBACZD,EAAM0C,OAAO3B,KAAI,SAAC8D,EAAO5D,GACtB,IAAI2E,EAAOC,KAAKC,OAAO9F,EAAM+F,YAAYC,UAAY,IAAIrD,KAAKkC,EAAMe,MAAMI,WAAa,IAAO,IAI9F,OAHIJ,EAAO,IACPA,EAAO,GAEU,YAAjBf,EAAMpE,OAEF,wBAAIU,IAAK0D,EAAMe,KAAMzD,cAAY,QAAQC,cAAY,eAAelC,QAAS,kBAAMF,EAAMiG,WAAWhF,KAChG,wBAAIS,GAAImD,EAAMe,MAAOA,GACrB,4BAAKf,EAAMZ,MACX,4BAAKY,EAAMxE,MACX,4BAAKwE,EAAM3B,MACX,4BAAK2B,EAAMG,QACX,4BAAKH,EAAMK,MACX,4BAAKL,EAAML,SACX,4BAAKK,EAAMU,cAIhB,WAMvB,yBAAKjE,OAA2B,IAAnBqE,GACT,wBAAI1F,UAAU,QAAd,YACA,2BAAOA,UAAU,2CACb,2BAAOA,UAAU,YACb,4BACI,oCACA,uCACA,oCACA,yCACA,oCACA,sCACA,oCACA,uCACA,4CAGR,2BAAOA,UAAU,YACZD,EAAM0C,OAAO3B,KAAI,SAAC8D,EAAO5D,GACtB,GAAqB,aAAjB4D,EAAMpE,OAAuB,CAC7B,IAAImF,EAAOC,KAAKC,OAAO9F,EAAM+F,YAAYC,UAAY,IAAIrD,KAAKkC,EAAMe,MAAMI,WAAa,IAAO,IAI9F,OAHIJ,EAAO,IACPA,EAAO,GAGP,wBAAIzE,IAAK0D,EAAMe,KAAMzD,cAAY,QAAQC,cAAY,iBAAiBlC,QAAS,kBAAMF,EAAMiG,WAAWhF,KAClG,wBAAIS,GAAImD,EAAMe,MAAOA,GACrB,4BAAKf,EAAM7D,SACX,4BAAK6D,EAAMZ,MACX,4BAAKY,EAAMxE,MACX,4BAAKwE,EAAM3B,MACX,4BAAK2B,EAAMG,QACX,4BAAKH,EAAMK,MACX,4BAAKL,EAAML,SACX,4BAAKK,EAAMU,cAIvB,OAAO,WAMvB,yBAAKtF,UAAU,QAAQyB,GAAG,iBACtB,yBAAKzB,UAAU,oBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,eAAd,cAEJ,yBAAKA,UAAU,0BACX,4BAAQA,UAAU,oCAAoCC,QAASF,EAAMqD,cACjErB,eAAa,SADjB,OAEA,4BAAQ/B,UAAU,mCAAmC+B,eAAa,SAAlE,MACA,4BAAQ/B,UAAU,iCAAiCC,QAAS,kBAAMF,EAAMkG,YAAY,YAChFlE,eAAa,SADjB,WAEA,4BAAQ/B,UAAU,sCAAsC+B,eAAa,QACjEG,cAAY,QAAQC,cAAY,cADpC,YAQhB,kBAAC+D,EAAD,CACIhG,MAAOH,EAAMG,MACbsD,WAAYzD,EAAMyD,WAClBC,YAAa1D,EAAM0D,YACnBK,mBAAoB/D,EAAM+D,qBAE9B,kBAACqC,EAAD,CACItF,QAASd,EAAMc,QACfqC,aAAcnD,EAAMmD,aACpBC,UAAWpD,EAAMkG,YACjB7C,cAAerD,EAAMqD,gBAEzB,kBAACgD,EAAD,CACIxB,MAAO7E,EAAMsG,YACblB,WAAYpF,EAAMoF,WAClBE,SAAUtF,EAAMsF,SAChBnF,MAAOH,EAAMuG,UACbf,UAAWxF,EAAMwF,eClItBgB,EAjBX,WAAYtD,EAAMe,EAAM5D,EAAM2E,EAAQE,EAAMV,EAASe,GAAc,oBAC/D9C,KAAKS,KAAOA,EACZT,KAAKwB,KAAOA,EACZxB,KAAKpC,KAAOA,EACZoC,KAAKuC,OAASA,EACdvC,KAAKyC,KAAOA,EACZzC,KAAK+B,QAAUA,EACf/B,KAAK8C,YAAcA,EACnB9C,KAAKgE,MAAO,IAAI9D,MAAO+D,qBACvBjE,KAAKmD,MAAO,IAAIjD,MAAOC,iBACvBH,KAAKzB,QAAU,KACfyB,KAAKhC,OAAS,UACdgC,KAAKkE,cAAgB,KACrBlE,KAAKmE,YAAc,MCgFZC,EA5FS,SAAC7G,GACrB,OACI,6BAASC,UAAWD,EAAMkC,OACtB,wBAAIjC,UAAU,yBAAd,oBACA,6BAGA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,cAAf,eACA,2BAAOtD,UAAU,eAAeyB,GAAG,YAAYwB,KAAK,OAAOM,MAAOxD,EAAM8G,iBAAiBC,WAAa,GAClGlD,SAAU,SAACC,GAAD,OAAO9D,EAAMgH,oBAAoB,YAAalD,EAAEE,OAAOR,UACrE,uBAAGvD,UAAU,eAAeD,EAAMiH,aAG1C,yBAAKhH,UAAU,SACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,YAAf,aACA,2BAAOtD,UAAU,eAAeyB,GAAG,UAAUwB,KAAK,OAAOM,MAAOxD,EAAM8G,iBAAiBI,SAAW,GAC9FrD,SAAU,SAACC,GAAD,OAAO9D,EAAMgH,oBAAoB,UAAWlD,EAAEE,OAAOR,YAG3E,yBAAKvD,UAAU,SACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,cAAf,eACA,2BAAOtD,UAAU,eAAeyB,GAAG,YAAYwB,KAAK,OAAOM,MAAOxD,EAAM8G,iBAAiBK,WAAa,GAClGtD,SAAU,SAACC,GAAD,OAAO9D,EAAMgH,oBAAoB,YAAalD,EAAEE,OAAOR,YAG7E,yBAAKvD,UAAU,SACX,yBAAKA,UAAU,cACX,2BAAOsD,QAAQ,YAAf,YACA,2BAAOtD,UAAU,eAAeyB,GAAG,UAAUwB,KAAK,OAAOM,MAAOxD,EAAM8G,iBAAiB9F,SAAW,GAC9F6C,SAAU,SAACC,GAAD,OAAO9D,EAAMgH,oBAAoB,UAAWlD,EAAEE,OAAOR,aAI/E,yBAAKvD,UAAU,OACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,4BAAQA,UAAU,+BACdC,QAAS,kBAAMF,EAAMoH,oBADzB,WAGJ,yBAAKnH,UAAU,SACX,4BAAQA,UAAU,+BAA+BqB,OAAQtB,EAAMqH,SAC3DnH,QAAS,kBAAMF,EAAMsH,gBADzB,YAOZ,2BAAOrH,UAAU,uCACb,+BACI,wBAAIA,UAAU,SACV,wBAAIC,QAAS,kBAAMF,EAAMuH,KAAK,UAA9B,aACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,mBAA9B,aACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,iBAA9B,QACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,aAA9B,WACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,UAA9B,QACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,UAA9B,QACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,UAA9B,QACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,YAA9B,UACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,UAA9B,QACA,wBAAIrH,QAAS,kBAAMF,EAAMuH,KAAK,iBAA9B,gBAGR,+BACKvH,EAAM0C,OAAO3B,KAAI,SAAA8D,GACd,OACI,wBAAI1D,IAAK0D,EAAMe,MACX,4BAAKf,EAAMe,KAAKhD,kBAChB,4BAAKiC,EAAM8B,cAAc/D,kBACzB,4BAAKiC,EAAM+B,aACX,4BAAK/B,EAAM7D,SACX,4BAAK6D,EAAM3B,MACX,4BAAK2B,EAAMZ,MACX,4BAAKY,EAAMxE,MACX,4BAAKwE,EAAMG,QACX,4BAAKH,EAAMK,MACX,4BAAKL,EAAMU,mBAM/B,wBAAItF,UAAU,0BAA0BqB,OAAgC,IAAxBtB,EAAM0C,OAAOO,QAA7D,oCClDGuE,EArCH,SAACxH,GAMZ,OACC,6BACU,yBAAKC,UAAU,yDACX,0BAAMA,UAAU,gBAAe,8CAC/B,4BAAQA,UAAU,iBAAiBiD,KAAK,SAASf,cAAY,WAAWC,cAAY,kBAChF,0BAAMnC,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2ByB,GAAG,iBACzC,wBAAIzB,UAAU,sBACV,wBAAIA,UAAU,YACV,4BAAQA,UAAU,eAAeC,QAAS,kBAAMF,EAAMG,MAAM,YAA5D,aAEJ,wBAAIF,UAAU,YACV,4BAAQA,UAAU,eAAeC,QAAS,kBAAMF,EAAMG,MAAM,eAA5D,eAEJ,wBAAIF,UAAU,YACV,4BAAQA,UAAU,eAAeC,QAAS,kBAAMF,EAAMG,MAAM,eAA5D,cAEJ,wBAAIF,UAAU,YACV,4BAAQA,UAAU,sCAAsCkC,cAAY,QAAQC,cAAY,qBAAxF,iBAEJ,wBAAInC,UAAU,YACV,4BAAQA,UAAU,sCAAsCC,QAAS,WA1B3D,WAAtBF,EAAMyH,aACNzH,EAAMG,MAAM,WAyB2FgC,cAAY,QAAQC,cAAY,eAAvH,qB,QCxBbsF,E,OAJEC,EAAMC,OAAO,CAC7BC,QAAS,0C,OCyEKC,EA1EK,SAAC9H,GAAW,IAAD,EACK+H,mBAAS,IADd,mBACpBC,EADoB,KACVC,EADU,OAEOF,mBAAS,IAFhB,mBAEpBG,EAFoB,KAETC,EAFS,OAGKJ,mBAAS,IAHd,mBAGpBzH,EAHoB,KAGV8H,EAHU,KAK3B,OACI,yBAAKnI,UAAU,QAAQyB,GAAG,oBACtB,yBAAKzB,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,eAAd,iBAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,2BAAOA,UAAU,eAAeiD,KAAK,OAAOU,YAAY,YACpDJ,MAAOwE,EAAUnE,SAAU,SAACC,GAAD,OAAOmE,EAAYnE,EAAEE,OAAOR,WAE/D,yBAAKvD,UAAU,YACX,2BAAOA,UAAU,eAAeiD,KAAK,OAAOU,YAAY,aACpDJ,MAAO0E,EAAWrE,SAAU,SAACC,GAAD,OAAOqE,EAAarE,EAAEE,OAAOR,WAEjE,yBAAKvD,UAAU,YACX,4BAAQA,UAAU,eAAe4D,SAAU,SAACC,GAAD,OAAOsE,EAAYtE,EAAEE,OAAOR,SACnE,4BAAQA,MAAM,MAAd,mBACA,2CACA,gDACA,2CAGR,yBAAKvD,UAAU,YACX,4BAAQA,UAAU,+BACdC,QAAS,kBAAMF,EAAMqI,gBAAgBL,EAAUE,EAAW5H,KAD9D,UAMZ,2BAAOL,UAAU,yBACb,+BACI,4BACI,wCACA,0CAGR,+BACKD,EAAM2B,MAAMZ,KAAI,SAACa,EAAMX,GACpB,OACI,wBAAIE,IAAKF,GACL,4BAAKW,EAAKvB,MACV,4BAAKuB,EAAKtB,UACV,4BACI,4BACIL,UAAU,cAAcC,QAAS,kBAAMF,EAAMsI,YAAYrH,KAD7D,gBAU5B,yBAAKhB,UAAU,qBCowBpBsI,E,2MAvzBXC,MAAQ,CACJzC,YAAa,IAAIpD,KACjB8F,YAAY,EAGZhB,YAAa,GACbiB,eAAgB,GAChBC,eAAgB,GAEhBC,SAAU,GACVC,UAAW,GACX/G,aAAc,GAEdhB,QAAS,GACTgI,YAAa,GACbC,aAAc,GAEdrG,OAAQ,GACR4D,YAAa,GACb0C,eAAgB,GAChBtF,YAAa,CACTR,KAAM,GACNe,KAAM,GACN5D,KAAM,GACN2E,OAAQ,GACRE,KAAM,GACNV,QAAS,GACTyE,MAAO,GAGPtF,UAAW,GACXO,UAAW,GACXC,UAAW,GACXC,YAAa,GACbE,UAAW,IAGfuC,gBAAiB,GACjBqC,yBAAyB,EACzBC,mBAAoB,GACpBC,cAAe,GACftC,iBAAkB,CACdC,UAAW,GACXG,QAAS,GACTC,UAAW,GACXnG,QAAS,IAEbiG,UAAW,GAEXoC,QAAS,O,EAwEbC,gBAAkB,WAId,IAHA,IAAIxI,EAAO,YAAO,EAAK0H,MAAM1H,SACzB+H,EAAS,YAAO,EAAKL,MAAMI,UAEtB5F,EAAI,EAAGA,EAAIlC,EAAQmC,OAAQD,IAChC,IAAK,IAAIuG,EAAI,EAAGA,EAAIV,EAAU5F,OAAQsG,IAC9BzI,EAAQkC,GAAG3C,OAASwI,EAAUU,GAAGlJ,OACjCwI,EAAUW,OAAOD,EAAG,GACpBA,KAIZ,EAAKE,SAAS,CAAEZ,UAAWA,K,EAI/Ba,WAAa,WACT,IAAI5I,EAAO,YAAO,EAAK0H,MAAM1H,SAC7BA,EAAQ4E,SAAQ,SAAA9D,GACZA,EAAKxB,OAAS,WAElBuH,EAAMgC,IAAI,qBAAsB7I,GAC3B8I,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,O,EAGpCzE,UAAY,WAERmC,EAAMgC,IAAI,uBAAwB,EAAKnB,MAAM9F,QACxCkH,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,O,EAGpC5B,gBAAkB,SAACL,EAAUE,EAAW5H,GACpC,IAAMD,EAAO6H,EAAY,IAAMF,EAE/B,GAAa,MAAT3H,GAAgBC,EAAU,CAC1B,IAAIqB,EAAQ,EAAK6G,MAAMI,SACnBhH,EAAO,CAAEvB,KAAMA,EAAMC,SAAUA,GACnCqB,EAAMuI,KAAKtI,GACX,EAAK6H,SAAS,CAAEb,SAAUjH,IAC1B,EAAK2H,kBAGL3B,EAAMwC,KAAK,cAAe,CACtB9J,KAAMA,EAAK+J,cACX9J,SAAUA,EAAS8J,gBAElBR,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,Q,EAKxCI,mBAAqB,SAACpJ,GAClB,IAAIU,EAAQ,EAAK6G,MAAMI,SACvBjH,EAAM6H,OAAOvI,EAAO,GACpB,EAAKwI,SAAS,CAAEb,SAAUjH,IAC1B,EAAK2H,kBACL3B,EAAMgC,IAAI,eAAgBhI,GACrBiI,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAH,GAAQ,OAAIC,QAAQC,IAAIF,O,EAGvCS,UAAY,SAACC,GACT,OAAmB,IAAfA,EAAItH,OACG,SAEA,W,EAMfuH,gBAAkB,SAACC,GACf,IAAIC,EACO,WAAPD,IACAC,EAAM,EAAKC,OAAO,EAAKnC,MAAMf,aAC7B,EAAKgC,SAAS,CAAEhC,YAAaiD,KAEtB,cAAPD,IACAC,EAAM,EAAKC,OAAO,EAAKnC,MAAME,gBAC7B,EAAKe,SAAS,CAAEf,eAAgBgC,KAEzB,cAAPD,IACAC,EAAM,EAAKC,OAAO,EAAKnC,MAAMG,gBAC7B,EAAKc,SAAS,CAAEd,eAAgB+B,M,EAIxCC,OAAS,SAACC,GACN,MAAY,KAARA,EAAmB,SACX,I,EAKhBC,qBAAuB,SAACC,EAAUC,GAC9B,IAAMC,EAAQF,EACRtH,EAAQuH,EACVE,EAAS,EAAKzC,MAAM0C,cACV,aAAVF,IACAC,EAAOjD,SAAWxE,GAER,cAAVwH,IACAC,EAAO/C,UAAY1E,GAET,aAAVwH,IACAC,EAAO3K,SAAWkD,GAEtB,EAAKiG,SAAS,CAAEyB,cAAeD,K,EAGnCtG,QAAU,SAACqG,GACP,MAAc,KAAVA,G,EAIRG,eAAiB,WAMb,IALA,IACIC,EADAvC,EAAS,YAAO,EAAKL,MAAMK,WAE3B/H,EAAO,YAAO,EAAK0H,MAAM1H,SACzBuK,EAAU,sBAELrI,EAAI,EAAGA,EAAI6F,EAAU5F,OAAQD,IACN,SAAxB6F,EAAU7F,GAAG5C,SACbgL,EAAa,IAAI5I,EAAQqG,EAAU7F,GAAG3C,KAAMwI,EAAU7F,GAAG1C,UACzDQ,EAAQoJ,KAAKkB,GACbvC,EAAUW,OAAOxG,EAAG,GACpBqI,EAAU,IAGF,wBAAZA,GACAC,SAASC,eAAe,cAAcpL,QACtC,EAAKsJ,SAAS,CAAE3H,aAAcuJ,MAG9B,EAAK5B,SAAS,CAAE3I,QAASA,EAAS+H,UAAWA,EAAW/G,aAAcuJ,IAEtE1D,EAAMgC,IAAI,qBAAsB7I,GAC3B8I,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,Q,EAKxCuB,sBAAwB,SAACvK,GACrB,IAAIU,EAAK,YAAO,EAAK6G,MAAMK,WAC3BlH,EAAM+D,SAAQ,SAAA9D,GACVA,EAAKxB,OAAS,WAElBuB,EAAMV,GAAOb,OAAS,OACtB,EAAKqJ,SAAS,CAAEZ,UAAWlH,K,EAG/B8J,qBAAuB,SAACxK,GACpB,EAAKuH,MAAM1H,QAAQ4E,SAAQ,SAAC1E,GACxBA,EAAQZ,OAAS,WAErB,IAAIU,EAAO,YAAO,EAAK0H,MAAM1H,SAC7BA,EAAQG,GAAOb,OAAS,OACxB,IAAI0I,EAAc7H,EACd8H,EAAe,EAAKP,MAAM1H,QAAQG,GAAOR,OAC7C,EAAKgJ,SAAS,CAAE3I,QAASA,EAASgI,YAAaA,EAAaC,aAAcA,K,EAG9E2C,cAAgB,SAACC,GAEb,IAAIlL,EAEJ,OAAQkL,GACJ,IAAK,aACDlL,EAAS,WACT,MACJ,IAAK,WACDA,EAAS,YACT,MACJ,IAAK,YACDA,EAAS,OACT,MACJ,IAAK,aACDA,EAAS,YACT,MACJ,IAAK,OACDA,EAAS,OACT,MACJ,IAAK,WAED,YADA,EAAKmL,kBAIb,IAAI3K,EAAQ,EAAKuH,MAAMM,YAEnBhI,EAAO,YAAO,EAAK0H,MAAM1H,SAE7BA,EAAQG,GAAOR,OAASA,EACxBK,EAAQG,GAAOT,eAAgB,IAAImC,MAAOC,iBAC1C,IAAImG,EAAetI,EAEnB,EAAKgJ,SAAS,CAAE3I,QAASA,EAASiI,aAAcA,EAAcD,YAAa7H,IAC3E,EAAKyI,c,EAITkC,gBAAkB,WACd,IAAI3K,EAAQ,EAAKuH,MAAMM,YAEnBhI,EAAO,YAAO,EAAK0H,MAAM1H,SAEvBc,EAAOd,EAAQ0I,OAAOvI,EAAO,GAEnC0G,EAAMgC,IAAI,qBAAsB7I,GAC3B8I,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAEhC,IAAIpB,EAAS,YAAO,EAAKL,MAAMK,WAC/BA,EAAUqB,KAAK,CACX7J,KAAMuB,EAAK,GAAGvB,KACdC,SAAUsB,EAAK,GAAGtB,WAGtB,EAAKmJ,SAAS,CAAE3I,QAASA,EAAS+H,UAAWA,EAAWE,aAD1C,GAC+DD,YAD/D,M,EAMlB/E,mBAAqB,SAAC8H,EAAOrI,GACzB,IAAIsI,EAAa,EAAKtD,MAAM9E,YACd,SAAVmI,IACAC,EAAW7H,KAAOT,GAER,SAAVqI,IACAC,EAAWzL,KAAOmD,GAER,WAAVqI,IACAC,EAAW9G,OAASxB,GAEV,YAAVqI,IACAC,EAAWtH,QAAUhB,GAEX,UAAVqI,IACAC,EAAW7C,MAAQzF,GAET,SAAVqI,IACAC,EAAW5G,KAAO1B,GAEtB,EAAKiG,SAAS,CAAE/F,YAAaoI,K,EAKjCC,gBAAkB,SAAC7I,GACf,IAAIoD,EAAc,EAAKkC,MAAMlC,YACvB0F,EAAU9I,EAChBoD,EAAYpD,KAAO8I,EACM,cAArB1F,EAAYpD,OACZoD,EAAYtB,OAAS,IAEzB,EAAKyE,SAAS,CAAEnD,YAAaA,K,EAGjC2F,kBAAoB,SAACJ,EAAOrI,GACxB,IAAIqB,EAAQ,EAAK2D,MAAMlC,YACT,SAAVuF,IACAhH,EAAMZ,KAAOT,GAEH,SAAVqI,IACAhH,EAAMxE,KAAOmD,GAEH,WAAVqI,IACAhH,EAAMG,OAASxB,GAEL,YAAVqI,IACAhH,EAAML,QAAUhB,GAEN,UAAVqI,IACAhH,EAAMU,YAAc/B,GAEV,SAAVqI,IACAhH,EAAMK,KAAO1B,GAEjB,EAAKiG,SAAS,CAAEnD,YAAazB,K,EAGjCqH,SAAW,SAACjB,GACR,MAAoB,KAAhBA,EAAO/H,MAA+B,KAAhB+H,EAAOhH,MAA+B,KAAhBgH,EAAO5K,MAGnC,aAAhB4K,EAAO/H,OACe,KAAlB+H,EAAOjG,QAAiC,KAAhBiG,EAAO/F,O,EAO3CiH,gBAAkB,WACd,IAAIlB,EAAS,EAAKzC,MAAM9E,YAExB,GADoB,EAAKwI,SAASjB,GAe9B,MAboB,KAAhBA,EAAO/H,OAAa+H,EAAOtH,UAAY,aACvB,KAAhBsH,EAAOhH,OAAagH,EAAO/G,UAAY,aACvB,KAAhB+G,EAAO5K,OAAa4K,EAAO9G,UAAY,aACvB,aAAhB8G,EAAO/H,OACe,KAAlB+H,EAAOjG,SACPiG,EAAO7G,YAAc,aAEL,KAAhB6G,EAAO/F,OACP+F,EAAO3G,UAAY,cAG3B,EAAKmF,SAAS,CAAE/F,YAAauH,SAC7BK,SAASC,eAAe,eAAepL,QAGvC,IAAM0E,EAAQ,IAAI2B,EAAMyE,EAAO/H,KAAM+H,EAAOhH,KAAMgH,EAAO5K,KAAK+J,cAAea,EAAOjG,OAAQiG,EAAO/F,KAAM+F,EAAOzG,QAASyG,EAAOhC,OAE5HvG,EAAS,EAAK8F,MAAM9F,OACxBA,EAAOwH,KAAKrF,GACZ,EAAK4E,SAAS,CAAE/G,OAAQA,IAExB,EAAK8C,YACLyF,EAAS,CACL/H,KAAM,GACNe,KAAM,GACN5D,KAAM,GACN2E,OAAQ,GACRE,KAAM,GACNV,QAAS,GACTyE,MAAO,GAEPtF,UAAW,GACXO,UAAW,GACXC,UAAW,GACXC,YAAa,GACbE,UAAW,IAGf,EAAKmF,SAAS,CAAE/F,YAAauH,IAC7BK,SAASC,eAAe,aAAaa,S,EAK7CC,kBAAoB,SAACnJ,GACjB,IAAIQ,EAAc,EAAK8E,MAAM9E,YAC7BA,EAAYR,KAAOA,EACnB,EAAKuG,SAAS,CAAE/F,YAAaA,K,EAGjC4I,kBAAoB,SAACrL,GACjB,IACIqF,EADM,YAAO,EAAKkC,MAAM9F,QACHzB,GAErBH,EAAO,YAAO,EAAK0H,MAAM1H,SAC7BA,EAAQ4E,SAAQ,SAAC1E,GACbA,EAAQZ,OAAS,WAErB,EAAKqJ,SAAS,CAAE3I,QAASA,EAASwF,YAAaA,EAAawC,YAAa,GAAIC,aAAc,M,EAG/FwD,cAAgB,SAACZ,GACb,IAAIrF,EAAc,EAAKkC,MAAMlC,YAC7B,GAAI,EAAK4F,SAAS5F,GACdgF,SAASC,eAAe,WAAWpL,YADvC,CAIA,IAAIuC,EAAS,EAAK8F,MAAM9F,OACpB5B,EAAO,YAAO,EAAK0H,MAAM1H,SACzBE,EAAUF,EAAQ,EAAK0H,MAAMM,aAE3B0D,EAAa9J,EAAO+J,QAAQnG,GAE9BoG,EAAQ,GACZ5L,EAAQ4E,SAAQ,SAAA1E,GACZ0L,EAAMxC,KAAKlJ,EAAQX,SAEvB,IAAMsM,EAAeD,EAAMD,QAAQnG,EAAYtF,SAE/C,GAA+B,KAA3B,EAAKwH,MAAMM,aAA+B,WAAT6C,EACjCjJ,EAAO8G,OAAOgD,EAAY,GAC1BlG,EAAY7F,OAAS,WACrB6F,EAAYtF,QAAUA,EAAQX,KAC9BqC,EAAOwH,KAAK5D,GACZxF,EAAQ,EAAK0H,MAAMM,aAAapG,SAChC5B,EAAQ,EAAK0H,MAAMM,aAAarI,OAAS,OACzCK,EAAQ4E,SAAQ,SAAA1E,GACZA,EAAQZ,OAAS,WAErB,EAAKqJ,SAAS,CAAEnD,YAAaA,EAAa5D,OAAQA,EAAQ5B,QAASA,EAASiI,aAAc,SAGzF,IAAe,YAAX4C,EAcL,YADAiB,MAAM,8BAZNlK,EAAO8G,OAAOgD,EAAY,GAC1BlG,EAAY7F,OAAS,UACrB6F,EAAYtF,QAAU,GACtB0B,EAAOwH,KAAK5D,GACZxF,EAAQ6L,GAAcjK,SACe,IAAjC5B,EAAQ6L,GAAcjK,SACtB5B,EAAQ6L,GAAclM,OAAS,aAEnC,EAAKgJ,SAAS,CAAEnD,YAAaA,EAAa5D,OAAQA,EAAQ5B,QAASA,IAQvE,EAAK0E,YACL,EAAKkE,e,EAGTmD,qBAAuB,WACnB,IAAMvG,EAAc,EAAKkC,MAAMlC,YAC3B5D,EAAS,EAAK8F,MAAM9F,OACpBzB,EAAQyB,EAAO+J,QAAQnG,GACvBO,EAAkB,EAAK2B,MAAM3B,gBAGjC,GAFAnE,EAAO8G,OAAOvI,EAAO,GAEM,aAAvBqF,EAAY7F,OAAuB,CACnC,IAAIK,EAAO,YAAO,EAAK0H,MAAM1H,SAEzB4L,EAAQ,GACZ5L,EAAQ4E,SAAQ,SAAA1E,GACZ0L,EAAMxC,KAAKlJ,EAAQX,SAEvB,IAAMsM,EAAeD,EAAMD,QAAQnG,EAAYtF,SAE3CA,EAAUF,EAAQ6L,GACtB3L,EAAQ0B,SAEe,SAAnB1B,EAAQP,QAAwC,IAAnBO,EAAQ0B,SACrC1B,EAAQP,OAAS,aAErBK,EAAQ6L,GAAgB3L,EACxBsF,EAAYK,cAAgB,IAAIhE,KAChC2D,EAAYM,YAAcf,KAAKC,OAAOQ,EAAYK,cAAcX,UAAY,IAAIrD,KAAK2D,EAAYV,MAAMI,WAAa,IAAO,IAC3HM,EAAYK,cAAgBL,EAAYK,cAAc/D,iBACtD0D,EAAY7F,OAAS,YACrBoG,EAAgBqD,KAAK5D,GACrB,EAAKmD,SAAS,CAAE3I,QAASA,EAAS+F,gBAAiBA,IACnD,EAAKiG,iBACLnF,EAAMwC,KAAK,yBAA0B7D,GAChCsD,MAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAIF,MAC7BG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAIpC,EAAKR,SAAS,CAAE/G,OAAQA,IACxB,EAAK8C,YACL,EAAKkE,c,EAGTqD,OAAS,SAACC,GACN,IAAIC,EAAQ,EACR7D,EAAgB,EAAKZ,MAAMY,cAQ/B,OAPI4D,IAAa5D,GACb6D,GAAS,EACT7D,EAAgB,IAEhBA,EAAgB4D,EAEpB,EAAKvD,SAAS,CAAEL,cAAeA,IACxB,SAAU8D,EAAGC,GAEhB,OADgBD,EAAEF,GAAYG,EAAEH,IAAc,EAAKE,EAAEF,GAAYG,EAAEH,GAAa,EAAI,GACpEC,I,EAIxBG,qBAAuB,SAACJ,GACpB,IAAItK,EAAS,EAAK8F,MAAM3B,gBACxBnE,EAAO6E,KAAK,EAAKwF,OAAOC,IACxB,EAAKvD,SAAS,CAAE5C,gBAAiBnE,K,EAGrCoK,eAAiB,WACb,IAAIzD,EACAgE,EAAa,EACbC,EAAc,EACd5K,EAAS,EAAK8F,MAAM3B,gBAClB0G,GAAQ,IAAI5K,MAAO+D,qBACzBhE,EAAOgD,SAAQ,SAAAb,GACPA,EAAM4B,OAAS8G,IACfF,GAAcxI,EAAM+B,YACpB0G,SAGRjE,EAAUxD,KAAKC,MAAMuH,EAAaC,MAE9BjE,EAAU,OAEd,EAAKI,SAAS,CAAEJ,QAASA,K,EAG7BrC,oBAAsB,SAAC6E,EAAOrI,GAC1B,OAAQqI,GACJ,IAAK,YACD,EAAKpC,SAAS,CACV3C,iBAAiB,eACV,EAAK0B,MAAM1B,iBADF,CAEZC,UAAWvD,MAGnB,MACJ,IAAK,UACD,EAAKiG,SAAS,CACV3C,iBAAiB,eACV,EAAK0B,MAAM1B,iBADF,CAEZI,QAAS1D,MAGjB,MACJ,IAAK,YACD,EAAKiG,SAAS,CACV3C,iBAAiB,eACV,EAAK0B,MAAM1B,iBADF,CAEZK,UAAW3D,MAGnB,MACJ,IAAK,UACD,EAAKiG,SAAS,CACV3C,iBAAiB,eACV,EAAK0B,MAAM1B,iBADF,CAEZ9F,QAASwC,MAGjB,MACJ,QAAS,S,EAIjBgK,UAAY,SAAC/G,GACT,IAAI0G,EAAI1G,EAAKgH,MAAM,MACnB,OAAO,IAAI9K,KAAKwK,EAAE,KAAMA,EAAE,GAAIA,EAAE,K,EAGpC/F,gBAAkB,WACd,IAAI1E,EAAS,GACTgL,EAAY,EAAKlF,MAAMW,mBAErBwE,EAAU,EAAKnF,MAAM1B,iBACvBG,EAAY,GAEVF,EAAY,EAAKyG,UAAUG,EAAQ5G,WACnCG,EAAU,EAAKsG,UAAUG,EAAQzG,SAWvC,GATIyG,EAAQ5G,YAAc4G,EAAQzG,UAC9BD,EAAY,oCACZvE,EAASgL,GAETC,EAAQzG,UAAYyG,EAAQ5G,YAC5BE,EAAY,oCACZvE,EAASgL,GAGTC,EAAQ5G,WAAa4G,EAAQzG,QAAS,CAEtC,IADA,IAAIT,EACKzD,EAAI,EAAGA,EAAI0K,EAAUzK,OAAQD,KAClCyD,EAAO,IAAI9D,KAAK+K,EAAU1K,GAAGyD,QACjBM,GAAaN,GAAQS,GAC7BxE,EAAOwH,KAAKwD,EAAU1K,IAG9B0K,EAAYhL,EAGhB,GAAIiL,EAAQxG,UAAW,CACnBzE,EAAS,GACT,IAAK,IAAIM,EAAI,EAAGA,EAAI0K,EAAUzK,OAAQD,IAC9B0K,EAAU1K,GAAG3C,KAAKuN,SAASD,EAAQxG,UAAUiD,gBAC7C1H,EAAOwH,KAAKwD,EAAU1K,IAG9B0K,EAAYhL,EAGhB,GAAIiL,EAAQ3M,QAAS,CACjB0B,EAAS,GACT,IAAK,IAAIM,EAAI,EAAGA,EAAI0K,EAAUzK,OAAQD,IAC9B0K,EAAU1K,GAAGhC,QAAQ4M,SAASD,EAAQ3M,QAAQoJ,gBAC9C1H,EAAOwH,KAAKwD,EAAU1K,IAG9B0K,EAAYhL,EAGhB,EAAK+G,SAAS,CACV5C,gBAAiBnE,EACjBwG,yBAAyB,EACzBpC,iBAAkB,CACdC,UAAW,GACXG,QAAS,GACTC,UAAW,GACXnG,QAAS,IAEbiG,UAAWA,K,EAInB4G,qBAAuB,WACnB,EAAKpE,SAAS,CACVP,yBAAyB,EACzBrC,gBAAiB,EAAK2B,MAAMW,mBAC5BlC,UAAW,M,gFAjqBfxE,KAAKgH,SAAS,CAAE1D,YAAa,IAAIpD,S,0CAGhB,IAAD,OAChBF,KAAKqL,iBACLC,aAAY,kBAAM,EAAKD,mBAAkB,KAEzCnG,EAAMqG,IAAI,wBACLpE,MAAK,SAAAC,GACF,IAAInH,EAAS,GACTuL,EAAOpE,EAASoE,KACpB,IAAK,IAAI9M,KAAO8M,EAAM,CAClB,GAAY,SAAR9M,EAGA,OAFAuB,EAAOwH,KAAK+D,QACZ,EAAKxE,SAAS,CAAE/G,OAAQA,IAGnBuL,EAAKC,eAAe/M,IACzBuB,EAAOwH,KAAK+D,EAAK9M,IAGzB,EAAKsI,SAAS,CAAE/G,OAAQA,OAE3BsH,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAEhCtC,EAAMqG,IAAI,0BACLpE,MAAK,SAAAC,GACF,IAAInH,EAAS,GACTuL,EAAOpE,EAASoE,KACpB,IAAK,IAAI9M,KAAO8M,EACRA,EAAKC,eAAe/M,IACpBuB,EAAOwH,KAAK+D,EAAK9M,IAGzB,EAAKsI,SAAS,CAAE5C,gBAAiBnE,EAAQyG,mBAAoBzG,IAC7D,EAAKoK,oBAGbnF,EAAMqG,IAAI,sBACLpE,MAAK,SAAAC,GACF,IAAI/I,EAAO,YAAO,EAAK0H,MAAM1H,SACzBmN,EAAOpE,EAASoE,KACpB,IAAK,IAAI9M,KAAO8M,EACRA,EAAKC,eAAe/M,IACpBL,EAAQoJ,KAAK+D,EAAK9M,IAG1B,EAAKsI,SAAS,CAAE3I,QAASA,OAE5BkJ,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAEhCtC,EAAMqG,IAAI,eACLpE,MAAK,SAAAC,GACF,IAAIlI,EAAQ,GACRsM,EAAOpE,EAASoE,KACpB,IAAK,IAAI9M,KAAO8M,EACRA,EAAKC,eAAe/M,KACpB8M,EAAK9M,GAAKf,OAAS,QACnB6N,EAAK9M,GAAKO,GAAK,CAACP,GAChBQ,EAAMuI,KAAK+D,EAAK9M,KAGxB,EAAKsI,SAAS,CAAEZ,UAAWlH,EAAOiH,SAAUjH,IAC5CwM,WAAW,EAAK7E,gBAAiB,QAEpCU,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,Q,+BAmoBhC,OACI,yBAAKhK,UAAU,OACX,yBAAKyB,GAAG,WACJ,0CAAe,6BAAOe,KAAK+F,MAAMa,UAErC,kBAAC+E,EAAD,CAAKjO,MAAOsC,KAAK+H,gBAAiB/C,YAAahF,KAAK+F,MAAMf,cAC1D,kBAAC4G,EAAD,CACInM,MAAOO,KAAK+F,MAAMf,YAClB1B,YAAatD,KAAK+F,MAAMzC,YACxBO,YAAa7D,KAAK+F,MAAMlC,YACxBgI,WAAY7L,KAAK6H,UACjB5H,OAAQD,KAAK+F,MAAM9F,OACnB5B,QAAS2B,KAAK+F,MAAM1H,QACpByN,WAAY9L,KAAK+F,MAAM+F,WACvB7K,YAAajB,KAAK+F,MAAM9E,YACxBvD,MAAOsC,KAAK0J,gBACZlG,WAAYxD,KAAK6J,kBACjB7I,WAAYhB,KAAK4J,kBACjBtI,mBAAoBtB,KAAKsB,mBACzBZ,aAAcV,KAAKgJ,qBACnBvF,YAAazD,KAAK8J,cAClBlJ,cAAeZ,KAAKoK,qBACpBzH,WAAY3C,KAAKwJ,kBACjB3G,SAAU7C,KAAKsJ,gBACfvG,UAAW/C,KAAK+C,YAEpB,kBAACgJ,EAAD,CACItM,MAAOO,KAAK+F,MAAME,eAClBzI,UAAWwC,KAAK6H,UAAU7H,KAAK+F,MAAM1H,SACrCA,QAAS2B,KAAK+F,MAAM1H,QACpBL,OAAQgC,KAAK+F,MAAMO,aACnBmC,cAAezI,KAAK+F,MAAM0C,cAC1BL,qBAAsBpI,KAAKoI,qBAC3BrJ,eAAgBiB,KAAK+I,sBACrBzJ,QAASU,KAAK0I,eACd/J,iBAAkBqB,KAAKiJ,cACvBpJ,cAAeG,KAAKgJ,qBACpB9J,MAAOc,KAAK+F,MAAMK,UAClB/G,aAAcW,KAAK+F,MAAM1G,eAE7B,kBAAC2M,EAAD,CACIvM,MAAOO,KAAK+F,MAAMG,eAClBjG,OAAQD,KAAK+F,MAAM3B,gBACnBU,KAAM9E,KAAK2K,qBACXtG,iBAAkBrE,KAAK+F,MAAM1B,iBAC7BE,oBAAqBvE,KAAKuE,oBAC1BI,gBAAiB3E,KAAK2E,gBACtBC,SAAU5E,KAAK+F,MAAMU,wBACrB5B,YAAa7E,KAAKoL,qBAClBa,eAAgBjM,KAAK+F,MAAMkG,eAC3BzH,UAAWxE,KAAK+F,MAAMvB,YAE1B,kBAAC,EAAD,CACItF,MAAOc,KAAK+F,MAAMI,SAClBP,gBAAiB5F,KAAK4F,gBACtBC,YAAa7F,KAAK4H,0B,GAjzBpBsE,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5D,SAASC,eAAe,SD6H3C,kBAAmB4D,WACrBA,UAAUC,cAAcC,MAAMzF,MAAK,SAAA0F,GACjCA,EAAaC,kB","file":"static/js/main.92c0d611.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst employee = (props) => {\r\n    return (\r\n        <tr className=\"text-capitalize\" onClick={props.click} active={props.active}>\r\n            <td>{props.name}</td>\r\n            <td>{props.position}</td>\r\n            <td>{props.timeIn}</td>\r\n            <td>{props.statusUpdated}</td>\r\n            <td>{props.status}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default employee;","import React from 'react';\r\n\r\nimport Employee from './Employee/Employee';\r\n\r\nconst staffTable = (props) => {\r\n\r\n    const isDisabled = (btnType, status) => {\r\n        if (btnType === 'startBreak') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'endBreak') {\r\n            if (status === 'On Break') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n        if (btnType === 'clockOut') {\r\n            if (status === 'Available') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    const isHidden = (btnType, status) => {\r\n        if (btnType === 'exitQueue') {\r\n            if (status === 'Away') return true;\r\n            else return false;\r\n        }\r\n        if (btnType === 'enterQueue') {\r\n            if (status === 'Away') return false;\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className=\"container\">\r\n                <table className=\"table\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Position</th>\r\n                            <th>Time In</th>\r\n                            <th>Status Updated</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white hover\">\r\n                        {props.bellmen.map((bellman, index) => {\r\n                            return (\r\n                                <Employee\r\n                                    key={index}\r\n                                    click={() => props.click(index)}\r\n                                    active={bellman.active}\r\n                                    name={bellman.name}\r\n                                    position={bellman.position}\r\n                                    timeIn={bellman.timeIn}\r\n                                    statusUpdated={bellman.statusUpdated}\r\n                                    status={bellman.status}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"text-center\">\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('startBreak')}\r\n                        disabled={isDisabled('startBreak', props.status)}>Start Break\r\n                        </button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('endBreak')}\r\n                        disabled={isDisabled('endBreak', props.status)}>End Break</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('exitQueue')}\r\n                        disabled={isDisabled('exitQueue', props.status)}\r\n                        hidden={isHidden('exitQueue', props.status)}>Exit Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('enterQueue')}\r\n                        hidden={isHidden('enterQueue', props.status)}>Enter Queue</button>\r\n                    <button\r\n                        className=\"btn btn-secondary m-3\"\r\n                        onClick={() => props.staffButtonClick('clockOut')}\r\n                        disabled={isDisabled('clockOut', props.status)}>Clock Out</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default staffTable;","import React from 'react';\r\n\r\nconst employeeRow = (props) => {\r\n\treturn (\r\n\t\t<tr className=\"text-capitalize\" onClick={props.staffListClick} active={props.active}>\r\n\t\t\t<td>{props.name}</td>\r\n\t\t\t<td>{props.position}</td>\r\n\t\t</tr>\r\n\t)\r\n}\r\n\r\nexport default employeeRow;","import React from 'react';\r\n\r\nimport EmployeeRow from './EmployeeRow/EmployeeRow';\r\n\r\nconst staffModal = (props) => {\r\n    return(\r\n        <div className=\"modal\" id=\"staffModal\">\r\n            <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2>Staff</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <table className=\"table\">\r\n                            <thead className=\"bg-light\">\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Position</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white hover\">\r\n                                {props.staff.map((empl, index) => {\r\n                                    return (\r\n                                        <EmployeeRow\r\n                                            key={index}\r\n                                            name={empl.name}\r\n                                            position={empl.position}\r\n                                            staffListClick={() => props.staffListClick(index)}\r\n                                            active={empl.active}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <h4 className=\"text-danger text-center\">{props.clockInError}</h4>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"btn btn-success form-control\" onClick={() => props.clockIn()} data-dismiss=\"modal\">Clock In</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default staffModal;","import React from 'react';\r\n\r\nimport StaffTable from './StaffTable/StaffTable';\r\nimport StaffModal from './StaffModal/StaffModal';\r\n\r\nconst timeClock = (props) => {\r\n    return (\r\n        <section className={props.class}>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Staff</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" id=\"clockInBtn\" data-toggle=\"modal\" data-target=\"#staffModal\">Clock In</button>\r\n                <StaffTable\r\n                    className={props.className}\r\n                    bellmen={props.bellmen}\r\n                    click={props.employeeClick}\r\n                    status={props.status}\r\n                    staffButtonClick={props.staffButtonClick}\r\n                />\r\n                <StaffModal\r\n                    staff={props.staff}\r\n                    staffListClick={props.staffListClick}\r\n                    clockIn={props.clockIn}\r\n                    clockInError={props.clockInError}\r\n                />\r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default timeClock;\r\n\r\n/*\r\n * <h1>Add Employee</h1>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\"\r\n                                value={props.bellmanInputs.lastName}\r\n                                onChange={(e) => props.bellmanInputsHandler('lastName', e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\" className=\"text-danger\">{props.bellmanInputs.lastNameError}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name:</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"First Name\"\r\n                                value={props.bellmanInputs.firstName}\r\n                                onChange={(e) => props.bellmanInputsHandler('firstName', e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"firstName\" className=\"text-danger\">{props.bellmanInputs.firstNameError}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"position\">Position:</label>\r\n                            <select className=\"form-control\" id=\"position\" value={props.bellmanInputs.position}\r\n                                onChange={(e) => props.bellmanInputsHandler('position', e.target.value)}>\r\n                                <option value=\"\" hidden>Select Position</option>\r\n                                <option value=\"Bellman\">Bellman</option>\r\n                                <option value=\"Bell Captain\">Bell Captain</option>\r\n                                <option value=\"Manager\">Manager</option>\r\n                                <option value=\"Other\">Other</option>\r\n                            </select>\r\n                            <label htmlFor=\"position\" className=\"text-danger\">{props.bellmanInputs.positionError}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={props.click}>Clock In</button>\r\n                */","class Bellman {\r\n    constructor(name, position) {\r\n        this.name = name;\r\n        this.position = position;\r\n        this.status = \"Available\";\r\n        this.active = \"false\";\r\n        this.fronts = 0;\r\n        this.timeIn = new Date().toLocaleString();\r\n        this.statusUpdated = new Date().toLocaleString();\r\n    }\r\n}\r\n\r\nexport default Bellman;","import React from 'react';\r\n\r\nconst assignModal = (props) => {\r\n    let noBellmen = null;\r\n    let availBellmen = false;\r\n    for (let i = 0; i < props.bellmen.length; i++) {\r\n        if (props.bellmen[i].status === \"Available\" || props.bellmen[i].status === \"Busy\") {\r\n            availBellmen = true;\r\n        }\r\n    }\r\n    if (availBellmen === false) {\r\n        noBellmen =\r\n            <p className=\"text-center\">*No available bellmen</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"modal\" id=\"assignModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Assign Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table text-capitalize\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody className=\"hover\">\r\n                                    {\r\n                                        props.bellmen.map((bellman, index) => {\r\n                                            if (bellman.status === \"Available\" || bellman.status === \"Busy\") {\r\n                                                return (\r\n                                                    <tr key={index} onClick={() => props.bellmanClick(index)} active={bellman.active}>\r\n                                                        <td>{bellman.name}</td>\r\n                                                        <td>{bellman.status}</td>\r\n                                                    </tr>\r\n                                                )\r\n                                            }\r\n                                            else return null;\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            {noBellmen}\r\n                            <div className=\"text-center\">\r\n                                <button className=\"btn btn-success m-3\" onClick={() => props.assignBtn('assign')}\r\n                                    data-dismiss=\"modal\">Assign</button>\r\n                                <button className=\"btn btn-danger m-3\" data-dismiss=\"modal\" data-toggle=\"modal\"\r\n                                    data-target=\"#confirmCancelModal\">Cancel Front</button>\r\n                                <button className=\"btn btn-secondary\" id=\"editBtn\" data-dismiss=\"modal\"\r\n                                    data-toggle=\"modal\" data-target=\"#editModal\">Edit</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal\" id=\"confirmCancelModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body text-center\">\r\n                            <h1 className=\"m-5\">Are you sure you want to cancel this front?</h1>\r\n                            <button className=\"btn btn-lg btn-success m-3\" onClick={props.confirmCancel} data-dismiss=\"modal\">Yes</button>\r\n                            <button className=\"btn btn-lg btn-danger m-3\" data-dismiss=\"modal\">No</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default assignModal;","import React from 'react';\r\n\r\nconst frontModal = (props) => {\r\n    /*\r\n    let ticketInput = null;\r\n    if (props.frontInputs.type === 'Check In') {\r\n        ticketInput =\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"ticketNumber\"\r\n                        placeholder=\"Ticket #\"\r\n                        onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                    />\r\n                    <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"#numBags\">Number of Bags:</label>\r\n                    <input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\"\r\n                        onChange={(e) => props.frontInputsHandler('bags', e.target.value)} />\r\n                    <p className=\"text-danger\">{props.frontInputs.bagsError}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    } else {\r\n        ticketInput = null;\r\n    }\r\n    */\r\n\r\n    return (\r\n        <form id=\"frontForm\">\r\n            <div className=\"modal\" id=\"frontModal\">\r\n                <div className=\"modal-dialog modal-lg\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h2 className=\"modal-title\">Add Front</h2>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-body\">\r\n                            <label htmlFor=\"#typeRadios\">Request Type:</label>\r\n                            <div id=\"typeRadios\">\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\"\r\n                                            value=\"Check In\" onClick={() => props.typeSelect('Check In')} />Check In\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\"\r\n                                            value=\"Check Out\" onClick={() => props.typeSelect('Check Out')} />Check Out\r\n                                    </label>\r\n                                </div>\r\n                                <p className=\"text-danger\">{props.frontInputs.typeError}</p>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontRoom\">Room:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontRoom\"\r\n                                            placeholder=\"Room #\"\r\n                                            onChange={(e) => props.frontInputsHandler('room', e.target.value)}\r\n                                            value={props.frontInputs.room}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.roomError}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontName\">Guest Name:</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"frontName\"\r\n                                            placeholder=\"Last Name\"\r\n                                            onChange={(e) => props.frontInputsHandler('name', e.target.value)}\r\n                                            value={props.frontInputs.name}\r\n                                        />\r\n                                        <p className=\"text-danger\">{props.frontInputs.nameError}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div hidden={props.frontInputs.type !== 'Check In'}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"ticketNumber\">Ticket:</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"ticketNumber\"\r\n                                                placeholder=\"Ticket #\"\r\n                                                onChange={(e) => props.frontInputsHandler('ticket', e.target.value)}\r\n                                            />\r\n                                            <p className=\"text-danger\">{props.frontInputs.ticketError}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-3\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"#numBags\">Number of Bags:</label>\r\n                                            <input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\"\r\n                                                onChange={(e) => props.frontInputsHandler('bags', e.target.value)} />\r\n                                            <p className=\"text-danger\">{props.frontInputs.bagsError}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"frontComment\">Comment:</label>\r\n                                        <textarea\r\n                                            className=\"form-control\"\r\n                                            id=\"frontComment\"\r\n                                            rows=\"2\"\r\n                                            placeholder=\"Comment...\"\r\n                                            onChange={(e) => props.frontInputsHandler('comment', e.target.value)}\r\n                                            value={props.frontInputs.comment}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <label htmlFor=\"#membershipRadios\">Membership:</label>\r\n                            <div id=\"membershipRadios\">\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\" value=\"Elite\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)} />Elite\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\"\r\n                                            value=\"Platinum\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Platinum\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\"\r\n                                            value=\"Titanium\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Titanium\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" id=\"ambassadorRadio\" name=\"frontElite\"\r\n                                            value=\"Ambassador\" onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                        />Ambassador\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"form-check-inline\">\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\"\r\n                                            onChange={(e) => props.frontInputsHandler('elite', e.target.value)}\r\n                                            defaultChecked />None\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-success form-control\" onClick={() => props.click()}\r\n                                data-dismiss=\"modal\">Dispatch</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        )\r\n}\r\n\r\nexport default frontModal;","import React from 'react';\r\n\r\nconst editModal = (props) => {\r\n\tlet isValid = 'modal';\r\n\tlet roomValidator = null;\r\n\tif (props.front.room === '') {\r\n\t\tisValid = '';\r\n\t\troomValidator =\r\n\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet nameValidator = null;\r\n\tif (props.front.name === '') {\r\n\t\tisValid = '';\r\n\t\tnameValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet ticketValidator = null;\r\n\tif (props.front.ticket === '' && props.front.type === 'Check In') {\r\n\t\tisValid = '';\r\n\t\tticketValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet bagsValidator = null;\r\n\tif (props.front.bags === '' && props.front.type === 'Check In') {\r\n\t\tisValid = '';\r\n\t\tbagsValidator =\r\n\t\t\t<p className=\"text-danger\">*Required</p>\r\n\t}\r\n\r\n\tlet ticketInput = null;\r\n\tif (props.front.type === 'Check In') {\r\n\t\tticketInput =\r\n\t\t<div className=\"row\">\r\n\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"ticketNumber\">Ticket:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\tid=\"ticketNumber\"\r\n\t\t\t\t\t\tvalue={props.front.ticket}\r\n\t\t\t\t\t\tonChange={(e) => props.editInputs('ticket', e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{ticketValidator}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-3\">\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"#numBags\">Number of Bags:</label>\r\n\t\t\t\t\t<input type=\"number\" className=\"form-control\" id=\"numBags\" min=\"1\" value={props.front.bags}\r\n\t\t\t\t\t\tonChange={(e) => props.editInputs('bags', e.target.value)} />\r\n\t\t\t\t\t{bagsValidator}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t} else {\r\n\t\tticketInput = null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"modal\" id=\"editModal\">\r\n\t\t\t<div className=\"modal-dialog modal-lg\">\r\n\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t<div className=\"modal-header\">\r\n\t\t\t\t\t\t<h1 className=\"modal-title\">Edit Front</h1>\r\n\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"checkInRadio\" name=\"frontType\" value=\"Check In\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.type === 'Check In'}\r\n\t\t\t\t\t\t\t\t\tonChange={() => props.editType('Check In')}/>Check In\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"checkOutRadio\" name=\"frontType\" value=\"Check Out\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.type === 'Check Out'}\r\n\t\t\t\t\t\t\t\t\tonChange={() => props.editType('Check Out')} />Check Out\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"#editRoom\">Room:</label>\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control\" type=\"number\" id=\"editRoom\" value={props.front.room || ''}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('room', e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{roomValidator}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"#editName\">Name:</label>\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control\" type=\"text\" id=\"editName\" value={props.front.name || ''}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('name', e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{nameValidator}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{ticketInput}\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"#editComment\">Comment:</label>\r\n\t\t\t\t\t\t\t<textarea className=\"form-control\" id=\"editComment\" value={props.front.comment}\r\n\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('comment', e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"eliteRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Elite\" checked={props.front.eliteStatus === 'Elite'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)} />Elite\r\n                                </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"platinumRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Platinum\" checked={props.front.eliteStatus === 'Platinum'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)} />Platinum\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"titaniumRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Titanium\" checked={props.front.eliteStatus === 'Titanium'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>Titanium\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" id=\"ambassadorRadio\" name=\"frontElite\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Ambassador\" checked={props.front.eliteStatus === 'Ambassador'}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>Ambassador\r\n                            </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-check-inline\">\r\n\t\t\t\t\t\t\t<label className=\"form-check-label\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" className=\"form-check-input\" name=\"frontElite\" value=\"\"\r\n\t\t\t\t\t\t\t\t\tchecked={props.front.eliteStatus === ''}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.editInputs('elite', e.target.value)}\r\n\t\t\t\t\t\t\t\t/>None\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"modal-footer\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-success form-control\"\r\n\t\t\t\t\t\t\tdata-dismiss={isValid}\r\n\t\t\t\t\t\t\tonClick={() => props.putFronts()}\r\n\t\t\t\t\t\t>Done</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default editModal;","import React from 'react';\r\n\r\nimport AssignModal from './AssignModal/AssignModal';\r\nimport FrontModal from './FrontModal/FrontModal';\r\nimport EditModal from './EditModal/EditModal';\r\n\r\nconst fronts = (props) => {\r\n    let pendingFronts = 0;\r\n    props.fronts.forEach(front => {\r\n        if (front.status === 'Pending') {\r\n            pendingFronts++;\r\n        }\r\n    })\r\n    \r\n    let assignedFronts = 0;\r\n    props.fronts.forEach(front => {\r\n        if (front.status === 'Assigned') {\r\n            assignedFronts++;\r\n        }\r\n    })\r\n\r\n    return (\r\n        <section className={props.class}>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-3 text-center\">Service Requests</h1>\r\n                <hr />\r\n                <button className=\"btn btn-primary\" id=\"addFrontBtn\" data-toggle=\"modal\" data-target=\"#frontModal\">Add Request</button>\r\n                <div hidden={pendingFronts === 0}>\r\n                    <h1 className=\"mt-3\">Pending</h1>\r\n                    <table className=\"table table-hover text-capitalize\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Bags</th>\r\n                                <th>Comment</th>\r\n                                <th>Membership</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white hover\">\r\n                            {props.fronts.map((front, index) => {\r\n                                let time = Math.floor((props.currentTime.getTime() - new Date(front.time).getTime()) / 1000 / 60);\r\n                                if (time < 0) {\r\n                                    time = 0;\r\n                                }\r\n                                if (front.status === 'Pending') {\r\n                                    return (\r\n                                        <tr key={front.time} data-toggle=\"modal\" data-target=\"#assignModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={front.time}>{time}</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.bags}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div hidden={assignedFronts === 0}>\r\n                    <h1 className=\"mt-3\">Assigned</h1>\r\n                    <table className=\"table table-hover text-capitalize hover\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th>Time</th>\r\n                                <th>Bellman</th>\r\n                                <th>Room</th>\r\n                                <th>Last Name</th>\r\n                                <th>Type</th>\r\n                                <th>Ticket</th>\r\n                                <th>Bags</th>\r\n                                <th>Comment</th>\r\n                                <th>Membership</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white\">\r\n                            {props.fronts.map((front, index) => {\r\n                                if (front.status === 'Assigned') {\r\n                                    let time = Math.floor((props.currentTime.getTime() - new Date(front.time).getTime()) / 1000 / 60);\r\n                                    if (time < 0) {\r\n                                        time = 0;\r\n                                    }\r\n                                    return (\r\n                                        <tr key={front.time} data-toggle=\"modal\" data-target=\"#completeModal\" onClick={() => props.frontClick(index)}>\r\n                                            <td id={front.time}>{time}</td>\r\n                                            <td>{front.bellman}</td>\r\n                                            <td>{front.room}</td>\r\n                                            <td>{front.name}</td>\r\n                                            <td>{front.type}</td>\r\n                                            <td>{front.ticket}</td>\r\n                                            <td>{front.bags}</td>\r\n                                            <td>{front.comment}</td>\r\n                                            <td>{front.eliteStatus}</td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"modal\" id=\"completeModal\">\r\n                    <div className=\"modal-dialog p-5\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h1 className=\"modal-title\">Complete?</h1>\r\n                            </div>\r\n                            <div className=\"modal-body text-center\">\r\n                                <button className=\"btn btn-success form-control my-1\" onClick={props.confirmCancel}\r\n                                    data-dismiss=\"modal\">Yes</button>\r\n                                <button className=\"btn btn-danger form-control my-1\" data-dismiss=\"modal\">No</button>\r\n                                <button className=\"btn btn-info form-control my-1\" onClick={() => props.assignFront('pending')}\r\n                                    data-dismiss=\"modal\">Pending</button>\r\n                                <button className=\"btn btn-secondary form-control my-1\" data-dismiss=\"modal\"\r\n                                    data-toggle=\"modal\" data-target=\"#editModal\">Edit</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FrontModal\r\n                    click={props.click}\r\n                    typeSelect={props.typeSelect}\r\n                    frontInputs={props.frontInputs}\r\n                    frontInputsHandler={props.frontInputsHandler}\r\n                />\r\n                <AssignModal\r\n                    bellmen={props.bellmen}\r\n                    bellmanClick={props.bellmanClick}\r\n                    assignBtn={props.assignFront}\r\n                    confirmCancel={props.confirmCancel}\r\n                />\r\n                <EditModal\r\n                    front={props.activeFront}\r\n                    editInputs={props.editInputs}\r\n                    editType={props.editType}\r\n                    click={props.editClick}\r\n                    putFronts={props.putFronts}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default fronts;","class Front {\r\n    constructor(type, room, name, ticket, bags, comment, eliteStatus) {\r\n        this.type = type;\r\n        this.room = room;\r\n        this.name = name;\r\n        this.ticket = ticket;\r\n        this.bags = bags;\r\n        this.comment = comment;\r\n        this.eliteStatus = eliteStatus;\r\n        this.date = new Date().toLocaleDateString();\r\n        this.time = new Date().toLocaleString();\r\n        this.bellman = null;\r\n        this.status = 'Pending';\r\n        this.timeCompleted = null;\r\n        this.timeElapsed = null;\r\n    }\r\n}\r\n\r\nexport default Front;","import React from 'react';\r\n\r\nconst completedFronts = (props) => {\r\n    return (\r\n        <section className={props.class}>\r\n            <h1 className=\"display-3 text-center\">Completed Fronts</h1>\r\n            <hr />\r\n\r\n\r\n            <div className=\"container my-4\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-3\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"#startDate\">Start Date:</label>\r\n                            <input className=\"form-control\" id=\"startDate\" type=\"date\" value={props.completedFilters.startDate || ''}\r\n                                onChange={(e) => props.setCompletedFilters('startDate', e.target.value)} />\r\n                            <p className=\"text-danger\">{props.dateError}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"#endDate\">End Date:</label>\r\n                            <input className=\"form-control\" id=\"endDate\" type=\"date\" value={props.completedFilters.endDate || ''}\r\n                                onChange={(e) => props.setCompletedFilters('endDate', e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"#guestName\">Guest Name:</label>\r\n                            <input className=\"form-control\" id=\"guestName\" type=\"text\" value={props.completedFilters.guestName || ''}\r\n                                onChange={(e) => props.setCompletedFilters('guestName', e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"#bellman\">Bellman:</label>\r\n                            <input className=\"form-control\" id=\"bellman\" type=\"text\" value={props.completedFilters.bellman || ''}\r\n                                onChange={(e) => props.setCompletedFilters('bellman', e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\"></div>\r\n                    <div className=\"col-4\">\r\n                        <button className=\"btn btn-success form-control\"\r\n                            onClick={() => props.searchCompleted()}>Search</button>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <button className=\"btn btn-primary form-control\" hidden={props.filtered}\r\n                            onClick={() => props.resetFilter()}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <table className=\"table table-striped text-capitalize\">\r\n                <thead>\r\n                    <tr className=\"hover\">\r\n                        <th onClick={() => props.sort('time')}>Requested</th>\r\n                        <th onClick={() => props.sort('timeCompleted')}>Completed</th>\r\n                        <th onClick={() => props.sort('timeElapsed')}>Time</th>\r\n                        <th onClick={() => props.sort('bellman')}>Bellman</th>\r\n                        <th onClick={() => props.sort('type')}>Type</th>\r\n                        <th onClick={() => props.sort('room')}>Room</th>\r\n                        <th onClick={() => props.sort('name')}>Name</th>\r\n                        <th onClick={() => props.sort('ticket')}>Ticket</th>\r\n                        <th onClick={() => props.sort('bags')}>Bags</th>\r\n                        <th onClick={() => props.sort('eliteStatus')}>Membership</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.fronts.map(front => {\r\n                        return (\r\n                            <tr key={front.time}>\r\n                                <td>{front.time.toLocaleString()}</td>\r\n                                <td>{front.timeCompleted.toLocaleString()}</td>\r\n                                <td>{front.timeElapsed}</td>\r\n                                <td>{front.bellman}</td>\r\n                                <td>{front.type}</td>\r\n                                <td>{front.room}</td>\r\n                                <td>{front.name}</td>\r\n                                <td>{front.ticket}</td>\r\n                                <td>{front.bags}</td>\r\n                                <td>{front.eliteStatus}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h4 className=\"text-center text-danger\" hidden={props.fronts.length !== 0}>*No completed fronts available</h4>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default completedFronts;","import React from 'react';\r\n\r\nconst nav = (props) => {\r\n    const toggleFronts = () => {\r\n        if (props.frontsClass === 'd-none') {\r\n            props.click('fronts');\r\n        }\r\n    }\r\n\treturn (\r\n\t\t<nav>\r\n            <nav className=\"navbar navbar-expand-md bg-dark navbar-dark fixed-top\">\r\n                <span className=\"navbar-brand\"><h3>Bellstand App</h3></span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarContent\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarContent\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('fronts')}>Requests</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('timeClock')}>Time Clock</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn\" onClick={() => props.click('completed')}>Completed</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn btn-primary text-white\" data-toggle=\"modal\" data-target=\"#manageStaffModal\">Manage Staff</button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <button className=\"nav-link btn btn-success text-white\" onClick={() => toggleFronts()} data-toggle=\"modal\" data-target=\"#frontModal\">Add Request</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default nav;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://bellstand-app.firebaseio.com/',\r\n});\r\n\r\nexport default instance;\r\n\r\n//\thttps://cors-anywhere.herokuapp.com/","import React, { useState } from 'react';\r\n\r\nconst ManageStaff = (props) => {\r\n    const [lastName, setLastName] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [position, setPosition] = useState('');\r\n\r\n    return (\r\n        <div className=\"modal\" id=\"manageStaffModal\">\r\n            <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h2 className=\"modal-title\">Manage Staff</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row my-3\">\r\n                                <div className=\"col-md-3\">\r\n                                    <input className=\"form-control\" type=\"text\" placeholder=\"Last Name\"\r\n                                        value={lastName} onChange={(e) => setLastName(e.target.value)}/>\r\n                                </div>\r\n                                <div className=\"col-md-3\">\r\n                                    <input className=\"form-control\" type=\"text\" placeholder=\"First Name\"\r\n                                        value={firstName} onChange={(e) => setFirstName(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"col-md-3\">\r\n                                    <select className=\"form-control\" onChange={(e) => setPosition(e.target.value)}>\r\n                                        <option value=\"-1\">Choose Position</option>\r\n                                        <option>Bellman</option>\r\n                                        <option>Bell Captain</option>\r\n                                        <option>Other</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"col-md-3\">\r\n                                    <button className=\"btn btn-success form-control\"\r\n                                        onClick={() => props.postNewEmployee(lastName, firstName, position)}>Add\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <table className=\"table text-capitalize\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Employee</th>\r\n                                    <th>Position</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.staff.map((empl, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{empl.name}</td>\r\n                                            <td>{empl.position}</td>\r\n                                            <td>\r\n                                                <button\r\n                                                    className=\"btn text-lg\" onClick={() => props.deleteStaff(index)}>&times;\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                    \r\n               \r\n\r\n    )\r\n}\r\n            \r\nexport default ManageStaff;","import React, { Component } from 'react';\nimport './App.css';\n\nimport TimeClock from './components/TimeClock/TimeClock';\nimport Bellman from './components/Bellman/Bellman';\nimport Fronts from './components/Fronts/Fronts';\nimport Front from './components/Fronts/Front/Front';\nimport CompletedFronts from './components/CompletedFronts/CompletedFronts';\nimport Nav from './components/Nav/Nav';\nimport axios from './axios-fronts';\r\nimport ManageStaff from './components/ManageStaff/ManageStaff';\r\n\nclass App extends Component {\n    state = {\r\n        currentTime: new Date(),\n        appMounted: false,\n\n        //Hide Elements\n        frontsClass: '',\n        timeClockClass: '',\n        completedClass: '',\n\n        allStaff: [],\n        staffList: [],\n        clockInError: '',\n\n        bellmen: [],\r\n        activeIndex: '',\r\n        activeStatus: '',\r\n\r\n        fronts: [],\r\n        activeFront: '',\r\n        prevFrontState: '',\r\n        frontInputs: {\r\n            type: '',\r\n            room: '',\r\n            name: '',\r\n            ticket: '',\r\n            bags: '',\r\n            comment: '',\r\n            elite: '',\r\n\r\n            //Validators\r\n            typeError: '',\r\n            roomError: '',\r\n            nameError: '',\r\n            ticketError: '',\r\n            bagsError: ''\r\n        },\r\n\r\n        completedFronts: [],\r\n        completedFrontsFiltered: true,\r\n        allCompletedFronts: [],\r\n        completedSort: '',\r\n        completedFilters: {\r\n            startDate: '',\r\n            endDate: '',\r\n            guestName: '',\r\n            bellman: ''\r\n        },\r\n        dateError: '',\r\n\r\n        aveTime: 'N/A'\r\n    }\n\n    setCurrentTime() {\r\n        this.setState({ currentTime: new Date() });\r\n    }\n\n    componentDidMount() {\n        this.setCurrentTime();\n        setInterval(() => this.setCurrentTime(), 3000);\n        \n        axios.get('/current-fronts.json')\r\n            .then(response => {\r\n                let fronts = [];\r\n                let data = response.data;\r\n                for (let key in data) {\r\n                    if (key === 'bags') {\r\n                        fronts.push(data);\r\n                        this.setState({ fronts: fronts });\r\n                        return;\r\n                    }\r\n                    else if (data.hasOwnProperty(key)) {\r\n                        fronts.push(data[key]);\r\n                    }\r\n                }\r\n                this.setState({ fronts: fronts });\r\n            })\r\n            .catch(error => console.log(error));\r\n\r\n        axios.get('/completed-fronts.json')\r\n            .then(response => {\r\n                let fronts = [];\r\n                let data = response.data;\r\n                for (let key in data) {\r\n                    if (data.hasOwnProperty(key)) {\r\n                        fronts.push(data[key]);\r\n                    }\r\n                }\r\n                this.setState({ completedFronts: fronts, allCompletedFronts: fronts });\r\n                this.aveTimeHandler();\r\n            })\r\n\r\n        axios.get('/active-staff.json')\r\n            .then(response => {\r\n                let bellmen = [...this.state.bellmen];\r\n                let data = response.data;\r\n                for (let key in data) {\r\n                    if (data.hasOwnProperty(key)) {\r\n                        bellmen.push(data[key]);\r\n                    }\r\n                }\r\n                this.setState({ bellmen: bellmen });\r\n            })\r\n            .catch(error => console.log(error));\r\n        \r\n        axios.get('/staff.json')\r\n            .then(response => {\r\n                let staff = [];\r\n                let data = response.data;\r\n                for (let key in data) {\r\n                    if (data.hasOwnProperty(key)) {\r\n                        data[key].active = 'false';\r\n                        data[key].id = [key];\r\n                        staff.push(data[key]);\r\n                    }\r\n                }\r\n                this.setState({ staffList: staff, allStaff: staff });\r\n                setTimeout(this.updateStaffList, 1000);\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\n\n    updateStaffList = () => {\r\n        let bellmen = [...this.state.bellmen];\r\n        let staffList = [...this.state.allStaff];\r\n\r\n        for (let i = 0; i < bellmen.length; i++) {\r\n            for (let j = 0; j < staffList.length; j++) {\r\n                if (bellmen[i].name === staffList[j].name) {\r\n                    staffList.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n        this.setState({ staffList: staffList });\r\n    }\n\n\n    putBellmen = () => {\n        let bellmen = [...this.state.bellmen];\n        bellmen.forEach(empl => {\n            empl.active = 'false';\r\n        })\n        axios.put('/active-staff.json', bellmen)\r\n            .then(response => console.log(response))\r\n            .catch(error => console.log(error));\r\n    }\n\n    putFronts = () => {\n        //let fronts = [...this.state.fronts];\r\n        axios.put('/current-fronts.json', this.state.fronts)\r\n            .then(response => console.log(response))\r\n            .catch(error => console.log(error));\r\n    }\n\n    postNewEmployee = (lastName, firstName, position) => {\n        const name = firstName + ' ' + lastName;\n\n        if (name !== ' ' && position) {\r\n            let staff = this.state.allStaff;\r\n            let empl = { name: name, position: position };\r\n            staff.push(empl);\r\n            this.setState({ allStaff: staff });\r\n            this.updateStaffList();\n\n\n            axios.post('/staff.json', {\r\n                name: name.toLowerCase(),\r\n                position: position.toLowerCase()\r\n            })\r\n                .then(response => console.log(response))\r\n                .catch(error => console.log(error));\n\r\n        }\r\n    }\n\n    deleteStaffHandler = (index) => {\n        let staff = this.state.allStaff;\n        staff.splice(index, 1);\n        this.setState({ allStaff: staff });\n        this.updateStaffList();\n        axios.put('./staff.json', staff)\r\n            .then(response => console.log(response))\r\n            .catch(response => console.log(response));\r\n    }\n\n    showTable = (arr) => {\n        if (arr.length === 0) {\r\n            return \"d-none\";\r\n        } else {\r\n            return \"d-block\";\r\n        }\r\n    }\n\n\n    //Nav Buttons\n    navClickHandler = (el) => {\n        let val;\n        if (el === 'fronts') {\r\n            val = this.toggle(this.state.frontsClass);\r\n            this.setState({ frontsClass: val });\r\n        }\r\n        if (el === 'timeClock') {\r\n            val = this.toggle(this.state.timeClockClass);\r\n            this.setState({ timeClockClass: val });\r\n        }\r\n        if (el === 'completed') {\r\n            val = this.toggle(this.state.completedClass);\r\n            this.setState({ completedClass: val });\r\n        }\r\n    }\n\n    toggle = (arg) => {\n        if (arg === '') return 'd-none';\r\n        else return '';\r\n    }\n\n    //Staff\n\n    bellmanInputsHandler = (argInput, argValue) => {\n        const input = argInput;\r\n        const value = argValue;\r\n        let inputs = this.state.bellmanInputs;\r\n        if (input === 'lastName') {\r\n            inputs.lastName = value;\r\n        }\r\n        if (input === 'firstName') {\r\n            inputs.firstName = value;\r\n        }\r\n        if (input === 'position') {\r\n            inputs.position = value;\r\n        }\r\n        this.setState({ bellmanInputs: inputs });\r\n    }\n\n    isValid = (input) => {\n        if (input === '') return false;\r\n        return true;\r\n    }\n\n    clockInHandler = () => {\n        let staffList = [...this.state.staffList];\n        let newBellman;\n        let bellmen = [...this.state.bellmen];\n        let message = '*Choose an Employee';\n\n        for (let i = 0; i < staffList.length; i++) {\r\n            if (staffList[i].active === 'true') {\r\n                newBellman = new Bellman(staffList[i].name, staffList[i].position);\r\n                bellmen.push(newBellman);\r\n                staffList.splice(i, 1);\r\n                message = '';\r\n            }\r\n        }\n        if (message === '*Choose an Employee') {\n            document.getElementById('clockInBtn').click();\r\n            this.setState({ clockInError: message });\r\n        }\n        else {\n            this.setState({ bellmen: bellmen, staffList: staffList, clockInError: message });\n\r\n            axios.put('/active-staff.json', bellmen)\r\n                .then(response => console.log(response))\r\n                .catch(error => console.log(error));\r\n        }\r\n        \r\n    }\n\n    staffListClickHandler = (index) => {\n        let staff = [...this.state.staffList];\n        staff.forEach(empl => {\n            empl.active = 'false';\r\n        })\n        staff[index].active = 'true';\n        this.setState({ staffList: staff });\r\n    }\n\n    employeeClickHandler = (index) => {\n        this.state.bellmen.forEach((bellman) => {\n            bellman.active = \"false\";\r\n        })\n        let bellmen = [...this.state.bellmen];\r\n        bellmen[index].active = \"true\";\r\n        let activeIndex = index;\r\n        let activeStatus = this.state.bellmen[index].status;\r\n        this.setState({ bellmen: bellmen, activeIndex: activeIndex, activeStatus: activeStatus });\r\n    }\n\n    statusHandler = (action) => {\n\n        let status;\n\n        switch (action) {\n            case \"startBreak\":\r\n                status = \"On Break\";\r\n                break;\r\n            case \"endBreak\":\r\n                status = \"Available\";\r\n                break;\r\n            case \"exitQueue\":\r\n                status = \"Away\";\r\n                break;\r\n            case \"enterQueue\":\r\n                status = \"Available\";\r\n                break;\r\n            case \"busy\":\r\n                status = \"Busy\";\r\n                break;\r\n            case \"clockOut\":\r\n                this.clockOutBellman();\r\n                return;\r\n            default: break;\r\n        }\n        let index = this.state.activeIndex;\n\n        let bellmen = [...this.state.bellmen];\r\n\r\n        bellmen[index].status = status;\r\n        bellmen[index].statusUpdated = new Date().toLocaleString();\r\n        let activeStatus = status;\r\n\r\n        this.setState({ bellmen: bellmen, activeStatus: activeStatus, activeIndex: index });\r\n        this.putBellmen();\r\n\r\n    }\n\n    clockOutBellman = () => {\n        let index = this.state.activeIndex;\n        \n        let bellmen = [...this.state.bellmen];\n        \n        const empl = bellmen.splice(index, 1);\n\n        axios.put('/active-staff.json', bellmen)\r\n            .then(response => console.log(response))\r\n            .catch(error => console.log(error));\n\n        let staffList = [...this.state.staffList];\n        staffList.push({\n            name: empl[0].name,\r\n            position: empl[0].position\r\n        });\n        const reset = '';\n        this.setState({ bellmen: bellmen, staffList: staffList, activeStatus: reset, activeIndex: reset });\r\n    }\n\n\n    //Fronts\n    frontInputsHandler = (field, value) => {\n        let inputState = this.state.frontInputs;\n        if (field === 'room') {\r\n            inputState.room = value;\r\n        }\r\n        if (field === 'name') {\r\n            inputState.name = value;\r\n        }\r\n        if (field === 'ticket') {\r\n            inputState.ticket = value;\r\n        }\r\n        if (field === 'comment') {\r\n            inputState.comment = value;\r\n        }\r\n        if (field === 'elite') {\r\n            inputState.elite = value;\r\n        }\r\n        if (field === 'bags') {\r\n            inputState.bags = value;\r\n        }\r\n        this.setState({ frontInputs: inputState });\r\n    }\n\n    // TODO - state should only changes when complete edit clicked\n\n    editTypeHandler = (type) => {\n        let activeFront = this.state.activeFront;\n        const newType = type;\r\n        activeFront.type = newType;\r\n        if (activeFront.type === 'Check Out') {\r\n            activeFront.ticket = '';\r\n        }\r\n        this.setState({ activeFront: activeFront });\r\n    }\n\n    editInputsHandler = (field, value) => {\n        let front = this.state.activeFront;\n        if (field === 'room') {\r\n            front.room = value;\r\n        }\r\n        if (field === 'name') {\r\n            front.name = value;\r\n        }\r\n        if (field === 'ticket') {\r\n            front.ticket = value;\r\n        }\r\n        if (field === 'comment') {\r\n            front.comment = value;\r\n        }\r\n        if (field === 'elite') {\r\n            front.eliteStatus = value;\r\n        }\r\n        if (field === 'bags') {\r\n            front.bags = value;\r\n        }\r\n        this.setState({ activeFront: front });\r\n    }\n\n    validate = (inputs) => {\n        if (inputs.type === '' || inputs.room === '' || inputs.name === '') {\r\n            return true;\r\n        }\r\n        if (inputs.type === 'Check In') {\r\n            if (inputs.ticket === '' || inputs.bags === '') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\n\n    addFrontHandler = () => {\r\n        let inputs = this.state.frontInputs;\r\n        const missingItem = this.validate(inputs);\r\n        if (missingItem) {\r\n            if (inputs.type === '') inputs.typeError = '*Required';\r\n            if (inputs.room === '') inputs.roomError = '*Required';\r\n            if (inputs.name === '') inputs.nameError = '*Required';\r\n            if (inputs.type === 'Check In') {\r\n                if (inputs.ticket === '') {\r\n                    inputs.ticketError = '*Required';\r\n                }\r\n                if (inputs.bags === '') {\r\n                    inputs.bagsError = '*Required';\r\n                }\r\n            }\r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('addFrontBtn').click();\r\n            return;\r\n        } else {\r\n            const front = new Front(inputs.type, inputs.room, inputs.name.toLowerCase(), inputs.ticket, inputs.bags, inputs.comment, inputs.elite);\r\n            \r\n            let fronts = this.state.fronts;\r\n            fronts.push(front);\r\n            this.setState({ fronts: fronts });\r\n\r\n            this.putFronts();\r\n            inputs = {\r\n                type: '',\r\n                room: '',\r\n                name: '',\r\n                ticket: '',\r\n                bags: '',\r\n                comment: '',\r\n                elite: '',\r\n\r\n                typeError: '',\r\n                roomError: '',\r\n                nameError: '',\r\n                ticketError: '',\r\n                bagsError: ''\r\n            }\r\n            \r\n            this.setState({ frontInputs: inputs });\r\n            document.getElementById('frontForm').reset();\r\n\r\n        }\r\n    }\n\n    typeSelectHandler = (type) => {\r\n        let frontInputs = this.state.frontInputs;\r\n        frontInputs.type = type;\r\n        this.setState({ frontInputs: frontInputs });\r\n    }\n\n    frontClickHandler = (index) => {\n        let fronts = [...this.state.fronts];\r\n        let activeFront = fronts[index];\r\n\r\n        let bellmen = [...this.state.bellmen];\r\n        bellmen.forEach((bellman) => {\r\n            bellman.active = 'false';\r\n        })\r\n        this.setState({ bellmen: bellmen, activeFront: activeFront, activeIndex: '', activeStatus: '' });\r\n    }\n\n    assignHandler = (action) => {\n        let activeFront = this.state.activeFront;\r\n        if (this.validate(activeFront)) {\r\n            document.getElementById('editBtn').click();\r\n            return;\r\n        }\r\n        let fronts = this.state.fronts;\n        let bellmen = [...this.state.bellmen];\n        let bellman = bellmen[this.state.activeIndex];\r\n\r\n        const frontIndex = fronts.indexOf(activeFront);\n        \n        let names = [];\n        bellmen.forEach(bellman => {\n            names.push(bellman.name);\r\n        })\n        const bellmanIndex = names.indexOf(activeFront.bellman);\n\n        if (this.state.activeIndex !== '' && action==='assign') {\r\n            fronts.splice(frontIndex, 1);\r\n            activeFront.status = 'Assigned';\r\n            activeFront.bellman = bellman.name;\r\n            fronts.push(activeFront);\r\n            bellmen[this.state.activeIndex].fronts++;\r\n            bellmen[this.state.activeIndex].status = 'Busy';\r\n            bellmen.forEach(bellman => {\r\n                bellman.active = \"false\";\r\n            })\r\n            this.setState({ activeFront: activeFront, fronts: fronts, bellmen: bellmen, activeStatus: '' });\r\n\r\n        }\r\n        else if (action === 'pending') {\r\n            fronts.splice(frontIndex, 1);\r\n            activeFront.status = 'Pending';\r\n            activeFront.bellman = '';\r\n            fronts.push(activeFront);\r\n            bellmen[bellmanIndex].fronts--;\r\n            if (bellmen[bellmanIndex].fronts === 0) {\r\n                bellmen[bellmanIndex].status = 'Available';\r\n            }\r\n            this.setState({ activeFront: activeFront, fronts: fronts, bellmen: bellmen });\r\n\r\n        }\r\n        else {\r\n            alert(\"Select a bellman to assign\");\r\n            return;\r\n        }\r\n        //this.printTicket();\r\n        this.putFronts();\r\n        this.putBellmen();\r\n    }\n\n    completeFrontHandler = () => {\n        const activeFront = this.state.activeFront;\r\n        let fronts = this.state.fronts;\r\n        let index = fronts.indexOf(activeFront);\r\n        let completedFronts = this.state.completedFronts;\r\n        fronts.splice(index, 1);\r\n\r\n        if (activeFront.status === 'Assigned') {\r\n            let bellmen = [...this.state.bellmen];\r\n\r\n            let names = [];\n            bellmen.forEach(bellman => {\n                names.push(bellman.name);\r\n            })\n            const bellmanIndex = names.indexOf(activeFront.bellman);\r\n\r\n            let bellman = bellmen[bellmanIndex];\r\n            bellman.fronts--;\r\n\r\n            if (bellman.status === 'Busy' && bellman.fronts === 0) {\r\n                bellman.status = 'Available';\r\n            }\r\n            bellmen[bellmanIndex] = bellman;\r\n            activeFront.timeCompleted = new Date();\r\n            activeFront.timeElapsed = Math.floor((activeFront.timeCompleted.getTime() - new Date(activeFront.time).getTime()) / 1000 / 60);\r\n            activeFront.timeCompleted = activeFront.timeCompleted.toLocaleString();\r\n            activeFront.status = \"Completed\";\r\n            completedFronts.push(activeFront);\r\n            this.setState({ bellmen: bellmen, completedFronts: completedFronts });\r\n            this.aveTimeHandler();\r\n            axios.post('/completed-fronts.json', activeFront)\r\n                .then(response => console.log(response))\r\n                .catch(error => console.log(error));\r\n\r\n        }\r\n        \r\n        this.setState({ fronts: fronts });\r\n        this.putFronts();\r\n        this.putBellmen();\r\n    }\n\n    sortBy = (property) => {\n        let order = 1;\r\n        let completedSort = this.state.completedSort;\r\n        if (property === completedSort) {\r\n            order = -1;\r\n            completedSort = '';\r\n        } else {\r\n            completedSort = property;\r\n        }\r\n        this.setState({ completedSort: completedSort });\r\n        return function (a, b) {\r\n            const result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r\n            return result * order;\r\n        }\r\n    }\n\n    sortCompletedHandler = (property) => {\n        let fronts = this.state.completedFronts;\n        fronts.sort(this.sortBy(property));\r\n        this.setState({ completedFronts: fronts });\r\n    }\n\n    aveTimeHandler = () => {\n        let aveTime;\r\n        let totalTimes = 0;\r\n        let totalFronts = 0;\r\n        let fronts = this.state.completedFronts;\r\n        const today = new Date().toLocaleDateString();\r\n        fronts.forEach(front => {\r\n            if (front.date === today) {\r\n                totalTimes += front.timeElapsed;\r\n                totalFronts++;\r\n            }\r\n        });\r\n        aveTime = Math.floor(totalTimes / totalFronts);\r\n        if (!aveTime) {\r\n            aveTime = 'N/A';\r\n        }\r\n        this.setState({ aveTime: aveTime });\r\n    }\n\n    setCompletedFilters = (field, value) => {\n        switch (field) {\r\n            case 'startDate':\r\n                this.setState({\r\n                    completedFilters: {\r\n                        ...this.state.completedFilters,\r\n                        startDate: value\r\n                    }\r\n                });\r\n                break;\r\n            case 'endDate':\r\n                this.setState({\r\n                    completedFilters: {\r\n                        ...this.state.completedFilters,\r\n                        endDate: value\r\n                    }\r\n                });\r\n                break;\r\n            case 'guestName':\r\n                this.setState({\r\n                    completedFilters: {\r\n                        ...this.state.completedFilters,\r\n                        guestName: value\r\n                    }\r\n                });\r\n                break;\r\n            case 'bellman':\r\n                this.setState({\r\n                    completedFilters: {\r\n                        ...this.state.completedFilters,\r\n                        bellman: value\r\n                    }\r\n                });\r\n                break;\r\n            default: return;\r\n        }\r\n    }\n\n    parseDate = (date) => {\r\n        var b = date.split(/\\D/);\r\n        return new Date(b[0], --b[1], b[2]);\r\n    }\n\n    searchCompleted = () => {\r\n        let fronts = [];\r\n        let allFronts = this.state.allCompletedFronts;\r\n        \n        const filters = this.state.completedFilters;\r\n        let dateError = '';\r\n\r\n        const startDate = this.parseDate(filters.startDate);\r\n        const endDate = this.parseDate(filters.endDate);\r\n\r\n        if (filters.startDate && !filters.endDate) {\r\n            dateError = '*Start date and end date required';\r\n            fronts = allFronts;\r\n        }\r\n        if (filters.endDate && !filters.startDate) {\r\n            dateError = '*Start date and end date required';\r\n            fronts = allFronts;\r\n        }\r\n\r\n        if (filters.startDate && filters.endDate) {\r\n            let date;\r\n            for (let i = 0; i < allFronts.length; i++) {\r\n                date = new Date(allFronts[i].date);\r\n                if (date >= startDate && date <= endDate) {\r\n                    fronts.push(allFronts[i]);\r\n                }\r\n            }\r\n            allFronts = fronts;\r\n        }\r\n\r\n        if (filters.guestName) {\r\n            fronts = [];\r\n            for (let i = 0; i < allFronts.length; i++) {\r\n                if (allFronts[i].name.includes(filters.guestName.toLowerCase())) {\r\n                    fronts.push(allFronts[i]);\r\n                }\r\n            }\r\n            allFronts = fronts;\r\n        }\r\n\r\n        if (filters.bellman) {\r\n            fronts = [];\r\n            for (let i = 0; i < allFronts.length; i++) {\r\n                if (allFronts[i].bellman.includes(filters.bellman.toLowerCase())) {\r\n                    fronts.push(allFronts[i]);\r\n                }\r\n            }\r\n            allFronts = fronts;\r\n        }\r\n\r\n        this.setState({\r\n            completedFronts: fronts,\r\n            completedFrontsFiltered: false,\r\n            completedFilters: {\r\n                startDate: '',\r\n                endDate: '',\r\n                guestName: '',\r\n                bellman: ''\r\n            },\r\n            dateError: dateError\r\n        });\r\n    }\n\n    resetCompletedFilter = () => {\n        this.setState({\r\n            completedFrontsFiltered: true,\r\n            completedFronts: this.state.allCompletedFronts,\r\n            dateError: ''\r\n        });\r\n    }\n\n    /*\n    printTicket = () => {\r\n        var ticket = window.open('', 'PRINT', 'height=400,width=400');\r\n\r\n\r\n        ticket.document.write('<html><head><title>' + document.title + '</title>');\r\n        ticket.document.write('</head><body >');\r\n        ticket.document.write('<h1>' + document.title + '</h1>');\r\n        mywindow.document.write(document.getElementById('printDiv').innerHTML);\r\n        ticket.document.write('</body></html>');\r\n\r\n        ticket.document.close(); // necessary for IE >= 10\r\n        ticket.focus(); // necessary for IE >= 10\r\n\r\n        ticket.print();\r\n        ticket.close();\r\n\r\n        return true;\r\n\n    }\n*/\n\n\n\n\n\n    render() {\n\n\n\n\n        return (\n            <div className=\"App\">\n                <div id=\"aveTime\">\r\n                    <h3>Ave. Time: <br />{this.state.aveTime}</h3>\r\n                </div>\n                <Nav click={this.navClickHandler} frontsClass={this.state.frontsClass} />\n                <Fronts\n                    class={this.state.frontsClass}\n                    currentTime={this.state.currentTime}\n                    activeFront={this.state.activeFront}\n                    tableClass={this.showTable}\n                    fronts={this.state.fronts}\n                    bellmen={this.state.bellmen}\n                    validators={this.state.validators}\n                    frontInputs={this.state.frontInputs}\n                    click={this.addFrontHandler}\n                    frontClick={this.frontClickHandler}\n                    typeSelect={this.typeSelectHandler}\n                    frontInputsHandler={this.frontInputsHandler}\n                    bellmanClick={this.employeeClickHandler}\n                    assignFront={this.assignHandler}\n                    confirmCancel={this.completeFrontHandler}\n                    editInputs={this.editInputsHandler}\n                    editType={this.editTypeHandler}\n                    putFronts={this.putFronts}\n                />\n                <TimeClock\n                    class={this.state.timeClockClass}\n                    className={this.showTable(this.state.bellmen)}\n                    bellmen={this.state.bellmen}\n                    status={this.state.activeStatus}\n                    bellmanInputs={this.state.bellmanInputs}\n                    bellmanInputsHandler={this.bellmanInputsHandler}\n                    staffListClick={this.staffListClickHandler}\n                    clockIn={this.clockInHandler}\n                    staffButtonClick={this.statusHandler}\n                    employeeClick={this.employeeClickHandler}\n                    staff={this.state.staffList}\n                    clockInError={this.state.clockInError}\n                />\n                <CompletedFronts\n                    class={this.state.completedClass}\n                    fronts={this.state.completedFronts}\n                    sort={this.sortCompletedHandler}\n                    completedFilters={this.state.completedFilters}\n                    setCompletedFilters={this.setCompletedFilters}\n                    searchCompleted={this.searchCompleted}\n                    filtered={this.state.completedFrontsFiltered}\n                    resetFilter={this.resetCompletedFilter}\n                    startDateError={this.state.startDateError}\n                    dateError={this.state.dateError}\n                />\n                <ManageStaff\n                    staff={this.state.allStaff}\n                    postNewEmployee={this.postNewEmployee}\n                    deleteStaff={this.deleteStaffHandler}\n                />\n            </div>\n        );\r\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}